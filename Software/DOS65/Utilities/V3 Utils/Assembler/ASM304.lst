  Tue Sep 27 2022  1:06                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C02 Macro Assembler    **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;*************************************************************************************************
     2                                PL      66      ;Page Length
     3                                PW      132     ;Page Width (# of char/line)
     4                                CASE    OFF     ;Ignore upper vs lower case for labels, etc.
     5                                CHIP    W65C02S ;Enable WDC 65C02 instructions
     6                                PASS1   OFF     ;Set ON when used for debug
     7                                INCLIST ON      ;Set ON for listing Include files
     8                        ;*************************************************************************************************
     9                        ;File Compare Version 3.04
    10                        ; - Modified for DOS/65 ROM Version 3.04 - KM
    11                        ; - Formatted for WDC Tools
    12                        ; - Minor CMOS enhancements
    13                        ; - Version completed on 15th September 2022
    14                        ;
    15                        ;ASM -- DOS/65 Assembler
    16                        ;Version 2.11-A
    17                        ;released:      7 march 2008
    18                        ;this version incorporates the following changes from 2.04
    19                        ;       format for *= changed for TASM compatibility
    20                        ;               this means first * not in column 1
    21                        ;               all such statements are on a separate line from lable
    22                        ;       .byt & .wor changed to .byte & .word for TASM
    23                        ;       all comments have ; for TASM
    24                        ;       made ' & " interchangeable so strings can us
    25                        ;               "" for TASM compatibility.
    26                        ;               note that ASM210 uses ' only
    27                        ;               and should be assembled either by
    28                        ;               itself, ASM204, or if all strings
    29                        ;               in .byte statement are changed to "
    30                        ;               it can be assembled by TASM.
    31                        ;       made all #' ' have closing ' (or ") for TASM
    32                        ;       strings broken up to 31 max for TASM
    33                        ;       many comments added or clarified
    34                        ;       more ascii characters defined to simplify compatibility
    35                        ;last revision:
    36                        ;       31 march 2008
    37                        ;               changed string delimiters to ""
    38                        ;               added five missing semicolons
    39                        ;ascii character definitions
    40             00000009   TAB     .EQU    $9              ;tab char
    41             0000000A   LF      .EQU    $A              ;linefeed
    42             0000000D   CR      .EQU    $D              ;return
    43             0000001A   EOF     .EQU    $1A             ;end of file
    44             00000020   BLANK   .EQU    $20             ;blank
    45             00000022   quote   .EQU    $22             ;value of "
    46             00000027   apost   .EQU    $27             ;value of '
    47             0000003B   semico  .EQU    $3b             ;value of semicolon ;
    48             0000007F   DELETE  .EQU    $7F             ;del char
    49                        ;fixed parameters
    50             0000000F   NUMASM  .EQU    15              ;number directives or parameters
    51             0000000A   NUMSAV  .EQU    10              ;number OPT parameters
    52             00000050   LINESZ  .EQU    80              ;characters per line (not incl cr/lf)
    53             00000018   BYTSRC  .EQU    24              ;bytes per kim record
    54             00000400   SRCLNG  .EQU    1024            ;source buffer length
    55             00000400   KIMLNG  .EQU    1024            ;kim buffer length
    56             00000400   LSTLNG  .EQU    1024            ;list buffer length
    57                        ;
  Tue Sep 27 2022  1:06                                                                                                    Page 2


    58                        ;DOS/65 addresses
    59             00000000   PZSTRT  .EQU    $00             ;page zero start
    60             00000103   PEM     .EQU    $103            ;fixed PEM entry point
    61             00000107   DFLFCB  .EQU    $107            ;default FCB
    62             00000128   DFLBUF  .EQU    $128            ;default disk buffer
    63             00000800   TEA     .EQU    $800            ;start of program area
    64                        ;
    65                                PAGE0
    66                        ;page zero variables
    67                                .ORG     PZSTRT
    68                        ;
    69 00:0000:              n       DEFS    2               ;count in sort
    70 00:0002:              PASNUM  DEFS    1               ;pass number
    71 00:0003:              SRCIND  DEFS    2               ;source buffer index
    72 00:0005:              KIMIND  DEFS    2               ;kim buffer index
    73 00:0007:              LSTIND  DEFS    2               ;list buffer index
    74 00:0009:              STSAVE  DEFS    2               ;symbol table start
    75 00:000B:              TBLSZ   DEFS    2               ;symbol table end
    76 00:000D:              SYMTBL  DEFS    2               ;address of symbol found
    77 00:000F:              OPRTBL  DEFS    2               ;address of opcode in table
    78                        ;
    79 00:0011:              TBLPTR  DEFS    2               ;used in assembler directive searches
    80                        ;TBLPTR  .EQU    $0031
    81                        ;
    82 00:0013:              COLCNT  DEFS    1               ;column count
    83 00:0014:              LINENO  DEFS    2               ;line number (hl)
    84 00:0016:              NOSYM   DEFS    2               ;number symbols (hl)
    85 00:0018:              ERCT    DEFS    2               ;total error count (hl)
    86 00:001A:              PC      DEFS    2               ;program counter
    87 00:001C:              FLAGS   DEFS    2               ;set of flags
    88                        ;flag bit functions
    89                        ; flag  (7)     if 1 then do not generate strings
    90                        ;       (6)     if 1 then list symbol table
    91                        ;       (5)     if 1 then generate kim file
    92                        ;       (4)     if 1 and if flag(2)=0 then list errors
    93                        ;       (3)
    94                        ;       (2)     if 1 then produce listing
    95                        ;       (1)
    96                        ;       (0)
    97                        ; flag+1(7)
    98                        ;       (6)
    99                        ;       (5)
   100                        ;       (4)     EXPR return flag
   101                        ;       (3)     EXPR overflow flag
   102                        ;       (2)
   103                        ;       (1)     sign bit
   104                        ;       (0)     EXP sign bit
   105 00:001E:              COLP    DEFS    1               ;current column
   106 00:001F:              CSB     DEFS    1               ;current string beginning
   107 00:0020:              CSE     DEFS    1               ;current string end
   108 00:0021:              CSL     DEFS    1               ;current string length
   109 00:0022:              LSST    DEFS    1               ;start of label
   110 00:0023:              EXP     DEFS    2               ;value of expression (hl)
   111 00:0025:              PARST   DEFS    1               ;parse starting column
   112 00:0026:              MAXCL   DEFS    1               ;max column in line
   113 00:0027:              LABL    DEFS    1               ;flag set if label in line
   114 00:0028:              ORG     DEFS    1               ;flag set if org in line
   115 00:0029:              BYWOR   DEFS    1               ;byte/word flag
   116 00:002A:              LCDPT   DEFS    1               ;multiple lines flag
   117 00:002B:              SYMPTR  DEFS    2               ;current # symbols searched in FIND
   118 00:002D:              LEN     DEFS    1               ;length of string to be packed
   119 00:002E:              BASE    DEFS    1               ;base of number
   120 00:002F:              OP      DEFS    1               ;next operator in EVAL
  Tue Sep 27 2022  1:06                                                                                                    Page 3


   121 00:0030:              LOW     DEFS    1               ;< flag
   122 00:0031:              HIGH    DEFS    1               ;> flag
   123 00:0032:              VAL     DEFS    2               ;intermediate value in EVAL (hl)
   124 00:0034:              RETURN  DEFS    1               ;return code
   125 00:0035:              OPBAS   DEFS    1               ;base opcode
   126 00:0036:              OPTEM   DEFS    1               ;opcode template
   127 00:0037:              OPLEN   DEFS    1               ;operand length
   128 00:0038:              OPTYP   DEFS    1               ;operand type
   129 00:0039:              NOPV    DEFS    1               ;flag for no operand value
   130 00:003A:              J       DEFS    1               ;utility variable
   131 00:003B:              ERCOL   DEFS    1               ;column with error
   132 00:003C:              EROR    DEFS    1               ;error number
   133 00:003D:              TEMP    DEFS    2               ;utility variable
   134 00:003F:              TEMB    DEFS    2               ;utility variable
   135 00:0041:              LTBL    DEFS    5               ;length table - info buffer
   136 00:0046:              SRTFLG  DEFS    1               ;sort flag
   137 00:0047:              CURADR  DEFS    2               ;current symbol for sort
   138 00:0049:              NXTADR  DEFS    2               ;next symbol for sort
   139 00:004B:              BYTCNT  DEFS    1               ;kim record byte count
   140 00:004C:              FRSTPC  DEFS    2               ;first pc in kim record
   141 00:004E:              KIMREC  DEFS    BYTSRC          ;kim record buffer
   142 00:0066:              CHKSUM  DEFS    2               ;kim record checksum
   143 00:0068:              CURNPC  DEFS    2               ;current kim pc
   144 00:006A:              CDEPTR  DEFS    2               ;code pointer
   145 00:006C:              SAVE    DEFS    2               ;save for x and y
   146 00:006E:              ACC     DEFS    2               ;mul and div accum
   147 00:0070:              KINDEX  DEFS    1               ;kim record index
   148 00:0071:              KIMCNT  DEFS    1               ;kim code count
   149 00:0072:              RDSCCN  DEFS    1               ;read source sector count
   150 00:0073:              LNGKIM  DEFS    1               ;length of buffer at write
   151 00:0074:              LNGLST  DEFS    1               ;length of list buffer
   152 00:0075:              MPNT    DEFS    1               ;pointer for string write
   153 00:0076:              MAXECH  DEFS    1               ;last echo position
   154 00:0077:              STRING  DEFS    1               ;lowercase flag
   155 00:0078:              lstflg  DEFS    1               ;list file to console if > 127
   156 00:0079:              nlsflg  DEFS    1               ;no list file output if > 127
   157 00:007A:              nkmflg  DEFS    1               ;no kim file output if > 127
   158 00:007B:              strdel  DEFS    1               ;string delimiter in .byt
   159             0000007C   LASTZP  .EQU    *
   160 00:007C:                      ends
   161                        
   162                                code
   163                        ;Main entry point
   164                                .ORG    TEA
   165                        ;
   166 00:0800: 4C 44 19             JMP     MAIN            ;skip to main section
   167 00:0803: 10           symlen  .DB     16              ;max symbol length
   168 00:0804: 43 4F 50 59          .DB     "COPYRIGHT (C) 2008 -"
       00:0808: 52 49 47 48 
       00:080C: 54 20 28 43 
       00:0810: 29 20 32 30 
       00:0814: 30 38 20 2D 
   169 00:0818: 20 52 49 43          .DB     " RICHARD A. LEARY"
       00:081C: 48 41 52 44 
       00:0820: 20 41 2E 20 
       00:0824: 4C 45 41 52 
       00:0828: 59 
   170                        ;subroutines
   171                        ;check for correct drive range
   172 00:0829: C9 41        chkdrv  cmp     #'A'            ;if less than a
   173 00:082B: 90 07                bcc     badrv           ;is bad
   174 00:082D: C9 49                cmp     #'H'+1          ;if over h
   175 00:082F: B0 03                bcs     badrv           ;is bad
  Tue Sep 27 2022  1:06                                                                                                    Page 4


   176 00:0831: 29 0F                and     #15             ;look at lsbs only
   177 00:0833: 60                   rts
   178 00:0834: A9 26        badrv   lda     #<ildmsg        ;point to message
   179 00:0836: A0 1B                ldy     #>ildmsg
   180 00:0838: 20 50 08             jsr     wrcnms          ;write it
   181                        ;warm boot
   182 00:083B: A2 00        WRMBTE  LDX     #0
   183 00:083D: F0 2B                BEQ     PEMENT
   184                        ;console output
   185 00:083F: C9 1A        cnsout  cmp     #eof            ;see if eof char
   186 00:0841: D0 01                bne     *+3             ;continue if not
   187 00:0843: 60                   rts                     ;else done
   188 00:0844: A2 02                LDX     #2
   189 00:0846: D0 22                BNE     PEMENT
   190                        ;select drive
   191 00:0848: A2 0E        DRVSEL  LDX     #14
   192 00:084A: D0 1E                BNE     PEMENT
   193                        ;set buffer address
   194 00:084C: A2 1A        SETBUF  LDX     #26
   195 00:084E: D0 1A                BNE     PEMENT
   196                        ;write console message
   197 00:0850: A2 09        WRCNMS  LDX     #9
   198 00:0852: D0 16                BNE     PEMENT
   199                        ;open file
   200 00:0854: A2 0F        OPNFIL  LDX     #15
   201 00:0856: D0 15                BNE     PEM255
   202                        ;close file
   203 00:0858: A2 10        CLSFIL  LDX     #16
   204 00:085A: D0 11                BNE     PEM255
   205                        ;delete file
   206 00:085C: A2 13        DLTFIL  LDX     #19
   207 00:085E: D0 0D                BNE     PEM255
   208                        ;create file
   209 00:0860: A2 16        CRTFIL  LDX     #22
   210 00:0862: D0 09                BNE     PEM255
   211                        ;read record
   212 00:0864: A2 14        RDERCR  LDX     #20
   213 00:0866: D0 02                BNE     PEMENT
   214                        ;write record
   215 00:0868: A2 15        WRTRCR  LDX     #21
   216                        ;PEM entry
   217 00:086A: 4C 03 01     PEMENT  JMP     PEM             ;execute
   218                        ;PEM entry with test A=255
   219 00:086D: 20 03 01     PEM255  JSR     PEM             ;execute
   220 00:0870: C9 FF                CMP     #255            ;test for invalid
   221 00:0872: 60                   RTS
   222                        ;write message to list file
   223                        ;input: A,Y point to message
   224                        ;output: none
   225                        ;alters: all
   226 00:0873: 85 75        WRLSMS  STA     MPNT            ;save
   227 00:0875: 84 76                STY     MPNT+1          ;pointer
   228 00:0877: A0 00                LDY     #0              ;clear index
   229 00:0879: B1 75        WR      LDA     (MPNT),Y        ;get char
   230 00:087B: C9 24                CMP     #'$'            ;see if $
   231 00:087D: D0 01                BNE     *+3             ;continue if not
   232 00:087F: 60                   RTS                     ;else done
   233 00:0880: 20 9C 09             JSR     OUTPUT          ;send it
   234 00:0883: C8                   INY                     ;bump index
   235 00:0884: D0 F3                BNE     WR              ;jump always
   236                        ;dos error handler
   237 00:0886: A9 8F        DOSERR  LDA     #<PERMSG        ;print error
   238 00:0888: A0 1B                LDY     #>PERMSG        ;message on
  Tue Sep 27 2022  1:06                                                                                                    Page 5


   239 00:088A: 20 50 08             JSR     WRCNMS          ;console
   240 00:088D: 4C 3B 08             JMP     WRMBTE          ;and do boot
   241                        ;set source fcb
   242 00:0890: A9 1C        SSRFCB  LDA     #<SRCFCB
   243 00:0892: A0 21                LDY     #>SRCFCB
   244 00:0894: 60                   RTS
   245                        ;set kim fcb
   246 00:0895: A9 3D        SKMFCB  LDA     #<KIMFCB
   247 00:0897: A0 21                LDY     #>KIMFCB
   248 00:0899: 60                   RTS
   249                        ;set list fcb
   250 00:089A: A9 5E        SLSFCB  LDA     #<LSTFCB
   251 00:089C: A0 21                LDY     #>LSTFCB
   252 00:089E: 60                   RTS
   253                        ;delete kim file
   254 00:089F: 20 95 08     DLTKIM  JSR     SKMFCB          ;set fcb
   255 00:08A2: 4C 5C 08             JMP     DLTFIL          ;delete and return
   256                        ;read source record
   257 00:08A5: A9 00        RDESRC  LDA     #<SRCBUF        ;set
   258 00:08A7: A0 22                LDY     #>SRCBUF        ;buffer
   259 00:08A9: 20 4C 08             JSR     SETBUF          ;address
   260 00:08AC: 20 90 08             JSR     SSRFCB          ;point to fcb
   261 00:08AF: 4C 64 08             JMP     RDERCR          ;read
   262                        ;write kim record
   263 00:08B2: 38           WRTKIM  SEC                     ;subtract
   264 00:08B3: A5 05                LDA     KIMIND          ;start
   265 00:08B5: E9 00                SBC     #<KIMBUF        ;from
   266 00:08B7: 85 73                STA     LNGKIM          ;index
   267 00:08B9: A5 06                LDA     KIMIND+1        ;to get
   268 00:08BB: E9 26                SBC     #>KIMBUF        ;length
   269 00:08BD: 85 74                STA     LNGKIM+1        ;of buffer
   270 00:08BF: A2 07                LDX     #7              ;divide
   271 00:08C1: 46 74        WRTDV   LSR     LNGKIM+1        ;by 128
   272 00:08C3: 66 73                ROR     LNGKIM          ;to get
   273 00:08C5: CA                   DEX                     ;number
   274 00:08C6: D0 F9                BNE     WRTDV           ;of records
   275 00:08C8: E4 73                CPX     LNGKIM          ;if not zero
   276 00:08CA: D0 01                BNE     *+3             ;go write
   277 00:08CC: 60                   RTS                     ;else done
   278 00:08CD: 20 F1 08             JSR     CLKIND          ;clear index
   279 00:08D0: A5 05        WRTKLP  LDA     KIMIND          ;get record
   280 00:08D2: A4 06                LDY     KIMIND+1        ;start
   281 00:08D4: 20 4C 08             JSR     SETBUF          ;and set buffer
   282 00:08D7: 20 95 08             JSR     SKMFCB          ;point to fcb
   283 00:08DA: 20 68 08             JSR     WRTRCR          ;write sector
   284 00:08DD: F0 03                BEQ     *+5             ;continue if ok
   285 00:08DF: 4C 86 08             JMP     DOSERR          ;else dos/65 error
   286 00:08E2: 18                   CLC                     ;add
   287 00:08E3: A5 05                LDA     KIMIND          ;128
   288 00:08E5: 69 80                ADC     #128            ;to
   289 00:08E7: 85 05                STA     KIMIND          ;kim
   290 00:08E9: 90 02                BCC     *+4             ;index
   291 00:08EB: E6 06                INC     KIMIND+1        ;for next
   292 00:08ED: C6 73                DEC     LNGKIM          ;drop count
   293 00:08EF: D0 DF                BNE     WRTKLP          ;loop if more
   294                        ;clear kim index
   295 00:08F1: A9 00        CLKIND  LDA     #<KIMBUF        ;set
   296 00:08F3: A0 26                LDY     #>KIMBUF        ;index
   297 00:08F5: 85 05                STA     KIMIND          ;to buffer
   298 00:08F7: 84 06                STY     KIMIND+1        ;start
   299 00:08F9: 60                   RTS
   300                        ;list file character output
   301                        ;input: ascii char in A
  Tue Sep 27 2022  1:06                                                                                                    Page 6


   302                        ;output: none
   303                        ;alters: all
   304                        ;write list buffer to disk if full and
   305                        ;then insert char into buffer
   306 00:08FA: 24 79        lstout  bit     nlsflg          ;test for no list output
   307 00:08FC: 30 22                bmi     lstext          ;done if set
   308 00:08FE: 24 78                bit     lstflg          ;test flag
   309 00:0900: 10 03                bpl     *+5             ;if clear to disk
   310 00:0902: 4C 3F 08             jmp     cnsout          ;else to console
   311 00:0905: A6 07                LDX     LSTIND          ;get low index
   312 00:0907: E0 00                CPX     #<LSTBUF+LSTLNG
   313                        ;        CPX     #LSTBUF+LSTLNG*256/256  ;compare to limit
   314 00:0909: D0 0B                BNE     NOLSWR          ;jump if ok
   315 00:090B: A6 08                LDX     LSTIND+1        ;else try
   316 00:090D: E0 2E                CPX     #>LSTBUF+LSTLNG
   317                        ;        CPX     #LSTBUF+LSTLNG/256      ;same for high
   318 00:090F: D0 05                BNE     NOLSWR          ;ok if different
   319 00:0911: 48                   PHA                     ;save char
   320 00:0912: 20 21 09             JSR     WRTLST          ;write buffer
   321 00:0915: 68                   PLA                     ;get char
   322 00:0916: A0 00        NOLSWR  LDY     #0              ;clear index
   323 00:0918: 91 07                STA     (LSTIND),Y      ;insert char
   324 00:091A: E6 07                INC     LSTIND          ;bump
   325 00:091C: D0 02                BNE     *+4             ;index
   326 00:091E: E6 08                INC     LSTIND+1        ;by one
   327 00:0920: 60           lstext  RTS
   328                        ;write list buffer to disk
   329                        ;input: none
   330                        ;output: none
   331                        ;alters: all
   332                        ;also sets index to start
   333 00:0921: 38           WRTLST  SEC                     ;subtract
   334 00:0922: A5 07                LDA     LSTIND          ;buffer start
   335 00:0924: E9 00                SBC     #<LSTBUF        ;from
   336 00:0926: 85 74                STA     LNGLST          ;current
   337 00:0928: A5 08                LDA     LSTIND+1        ;index to
   338 00:092A: E9 2A                SBC     #>LSTBUF        ;get
   339 00:092C: 85 75                STA     LNGLST+1        ;length
   340 00:092E: A2 07                LDX     #7              ;divide
   341 00:0930: 46 75        WRLDV   LSR     LNGLST+1        ;that
   342 00:0932: 66 74                ROR     LNGLST          ;by 128
   343 00:0934: CA                   DEX                     ;to calculate
   344 00:0935: D0 F9                BNE     WRLDV           ;number records
   345 00:0937: E4 74                CPX     LNGLST          ;if not zero
   346 00:0939: D0 01                BNE     *+3             ;then go write
   347 00:093B: 60                   RTS                     ;else done
   348 00:093C: 20 60 09             JSR     CLLIND          ;set index to start
   349 00:093F: A5 07        WRTLLP  LDA     LSTIND          ;get index
   350 00:0941: A4 08                LDY     LSTIND+1        ;and set
   351 00:0943: 20 4C 08             JSR     SETBUF          ;as buffer start
   352 00:0946: 20 9A 08             JSR     SLSFCB          ;point to fcb
   353 00:0949: 20 68 08             JSR     WRTRCR          ;write record
   354 00:094C: F0 03                BEQ     *+5             ;continue if ok
   355 00:094E: 4C 86 08             JMP     DOSERR          ;else a fatal error
   356 00:0951: 18                   CLC                     ;now
   357 00:0952: A5 07                LDA     LSTIND          ;add
   358 00:0954: 69 80                ADC     #128            ;128
   359 00:0956: 85 07                STA     LSTIND          ;to
   360 00:0958: 90 02                BCC     *+4             ;index
   361 00:095A: E6 08                INC     LSTIND+1        ;for next
   362 00:095C: C6 74                DEC     LNGLST          ;drop count
   363 00:095E: D0 DF                BNE     WRTLLP          ;loop if more
   364                        ;clear list index
  Tue Sep 27 2022  1:06                                                                                                    Page 7


   365                        ;input: none
   366                        ;output: none
   367                        ;alters: A,Y,P
   368 00:0960: A9 00        CLLIND  LDA     #<LSTBUF        ;set list
   369 00:0962: A0 2A                LDY     #>LSTBUF        ;index
   370 00:0964: 85 07                STA     LSTIND          ;to
   371 00:0966: 84 08                STY     LSTIND+1        ;buffer
   372 00:0968: 60                   RTS                     ;start
   373                        ;convert nibble to hex
   374 00:0969: 29 0F        NIBHEX  AND     #$F             ;mask out msn
   375 00:096B: 09 30                ORA     #'0'            ;convert to ascii
   376 00:096D: C9 3A                CMP     #'9'+1          ;if decimal
   377 00:096F: 90 02                BCC     *+4             ;ok
   378 00:0971: 69 06                ADC     #6              ;else make alpha
   379 00:0973: 60                   RTS
   380                        ;kim file byte output
   381 00:0974: 48           KIMBYT  PHA                     ;save byte
   382 00:0975: 4A                   LSR     A               ;move
   383 00:0976: 4A                   LSR     A               ;msn
   384 00:0977: 4A                   LSR     A               ;to
   385 00:0978: 4A                   LSR     A               ;lsn
   386 00:0979: 20 7D 09             JSR     KIMHEX          ;convert and send
   387 00:097C: 68                   PLA                     ;get byte
   388                        ;kim file nibble output
   389 00:097D: 20 69 09     KIMHEX  JSR     NIBHEX          ;convert
   390                        ;kim file char output
   391 00:0980: A6 05        KIMOUT  LDX     KIMIND          ;compare index
   392 00:0982: E0 00                CPX     #<KIMBUF+KIMLNG
   393                        ;        CPX     #KIMBUF+KIMLNG*256/256  ;to limit
   394 00:0984: D0 0B                BNE     NOKMWR          ;continue if less
   395 00:0986: A6 06                LDX     KIMIND+1        ;do same
   396 00:0988: E0 2A                CPX     #>KIMBUF+KIMLNG
   397                        ;        CPX     #KIMBUF+KIMLNG/256      ;for
   398 00:098A: D0 05                BNE     NOKMWR          ;high bytes
   399 00:098C: 48                   PHA                     ;save byte
   400 00:098D: 20 B2 08             JSR     WRTKIM          ;write buffer
   401 00:0990: 68                   PLA                     ;restore char
   402 00:0991: A0 00        NOKMWR  LDY     #0              ;clear index
   403 00:0993: 91 05                STA     (KIMIND),Y      ;save char
   404 00:0995: E6 05                INC     KIMIND          ;bump
   405 00:0997: D0 02                BNE     *+4             ;index
   406 00:0999: E6 06                INC     KIMIND+1        ;by one
   407 00:099B: 60                   RTS
   408                        ;output single char to list file
   409 00:099C: 08           OUTPUT  PHP                     ;save flags
   410 00:099D: 48                   PHA                     ;save char
   411 00:099E: 86 6C                STX     SAVE            ;save X
   412 00:09A0: 84 6D                STY     SAVE+1          ;and Y
   413 00:09A2: 24 02                BIT     PASNUM
   414 00:09A4: 10 03                BPL     *+5
   415 00:09A6: 20 FA 08             JSR     LSTOUT          ;do output
   416 00:09A9: A4 6D                LDY     SAVE+1          ;restore Y
   417 00:09AB: A6 6C                LDX     SAVE            ;and X
   418 00:09AD: 68                   PLA                     ;restore char
   419 00:09AE: 28                   PLP                     ;restore flags
   420 00:09AF: 60                   RTS
   421                        ;output byte as hex to list file
   422 00:09B0: 48           NUMA    PHA                     ;save byte
   423 00:09B1: 4A                   LSR     A               ;move
   424 00:09B2: 4A                   LSR     A               ;msn
   425 00:09B3: 4A                   LSR     A               ;to
   426 00:09B4: 4A                   LSR     A               ;lsn
   427 00:09B5: 20 69 09             JSR     NIBHEX          ;convert
  Tue Sep 27 2022  1:06                                                                                                    Page 8


   428 00:09B8: 20 9C 09             JSR     OUTPUT          ;and send
   429 00:09BB: 68                   PLA                     ;get char
   430 00:09BC: 20 69 09             JSR     NIBHEX          ;convert lsn
   431 00:09BF: 4C 9C 09             JMP     OUTPUT          ;and send
   432                        ;output byte as hex to console
   433                        ;input: A
   434                        ;output: none
   435                        ;alters: A,P
   436 00:09C2: 48           CNUMA   PHA                     ;save byte
   437 00:09C3: 4A                   LSR     A               ;move
   438 00:09C4: 4A                   LSR     A               ;msn
   439 00:09C5: 4A                   LSR     A               ;to
   440 00:09C6: 4A                   LSR     A               ;lsn
   441 00:09C7: 20 69 09             JSR     NIBHEX          ;convert
   442 00:09CA: 20 3F 08             JSR     CNSOUT          ;send to console
   443 00:09CD: 68                   PLA                     ;get byte
   444 00:09CE: 20 69 09             JSR     NIBHEX          ;convert low
   445 00:09D1: 4C 3F 08             JMP     CNSOUT          ;send it
   446                        ;do a cr and lf to list file
   447 00:09D4: A9 0D        CRLF    LDA     #CR             ;get cr
   448 00:09D6: 20 9C 09             JSR     OUTPUT          ;send
   449 00:09D9: A9 0A                LDA     #LF             ;then get lf
   450 00:09DB: 4C 9C 09             JMP     OUTPUT          ;send it
   451                        ;do a cr and lf to console
   452 00:09DE: A9 0D        CCRLF   LDA     #CR             ;get cr
   453 00:09E0: 20 3F 08             JSR     CNSOUT          ;send
   454 00:09E3: A9 0A                LDA     #LF             ;then get lf
   455 00:09E5: 4C 3F 08             JMP     CNSOUT          ;and send it
   456                        ;set next sort address
   457 00:09E8: 18           ADRNS   CLC                     ;add
   458 00:09E9: A5 47                LDA     CURADR          ;length+2
   459 00:09EB: 6D 03 08             ADC     symlen          ;to current
   460 00:09EE: 85 49                STA     NXTADR          ;to
   461 00:09F0: A5 48                LDA     CURADR+1        ;make
   462 00:09F2: 69 00                ADC     #0              ;pointer to
   463 00:09F4: 85 4A                STA     NXTADR+1        ;next entry
   464 00:09F6: 18                   clc                     ;do +2 part now
   465 00:09F7: A5 49                lda     nxtadr
   466 00:09F9: 69 02                adc     #2
   467 00:09FB: 85 49                sta     nxtadr
   468 00:09FD: 90 02                bcc     adrnsx          ;done if no carry
   469 00:09FF: E6 4A                inc     nxtadr+1        ;else bump high
   470 00:0A01: 60           adrnsx  RTS
   471                        ;sort symbol table
   472                        ;uses bubble sort but keeps track
   473                        ;of highest symbol to sort
   474                        ;check for zero or one symbol
   475 00:0A02: A4 17        sort    ldy     nosym+1         ;set low
   476 00:0A04: 84 01                sty     n+1             ;count
   477 00:0A06: A5 16                LDA     NOSYM           ;and high
   478 00:0A08: 85 00                sta     n               ;count
   479 00:0A0A: D0 1C                BNE     SORT1           ;if > 255 go do sort
   480 00:0A0C: 98                   tya                     ;get low
   481 00:0A0D: F0 04                beq     sortx           ;done if zero
   482 00:0A0F: C9 01                CMP     #1              ;if more than
   483 00:0A11: D0 15                BNE     SORT1           ;one do sort
   484 00:0A13: 60           sortx   RTS                     ;else done
   485                        ;drop and check count
   486 00:0A14: A5 01        sort0   lda     n+1             ;check low
   487 00:0A16: D0 02                bne     *+4             ;skip if not zero
   488 00:0A18: C6 00                dec     n               ;else drop high
   489 00:0A1A: C6 01                dec     n+1             ;then low
   490 00:0A1C: A5 00                lda     n               ;get new high
  Tue Sep 27 2022  1:06                                                                                                    Page 9


   491 00:0A1E: D0 08                bne     sort1           ;do it if <> 0
   492 00:0A20: A5 01                lda     n+1             ;now get low
   493 00:0A22: F0 EF                beq     sortx           ;done if zero
   494 00:0A24: C9 01                cmp     #1              ;see if one
   495 00:0A26: F0 EB                beq     sortx           ;done if is
   496                        ;intialize for pass
   497 00:0A28: A9 FF        SORT1   LDA     #$FF            ;set
   498 00:0A2A: 85 46                STA     SRTFLG          ;flag
   499 00:0A2C: A5 09                LDA     STSAVE          ;set
   500 00:0A2E: 85 47                STA     CURADR          ;pointer
   501 00:0A30: A5 0A                LDA     STSAVE+1        ;to first
   502 00:0A32: 85 48                STA     CURADR+1        ;entry
   503 00:0A34: A9 01                LDA     #1              ;then
   504 00:0A36: 85 2C                STA     SYMPTR+1        ;set
   505 00:0A38: A9 00                LDA     #0              ;counter
   506 00:0A3A: 85 2B                STA     SYMPTR          ;to one
   507 00:0A3C: 20 E8 09             JSR     ADRNS           ;set next address
   508                        ;compare symbols
   509 00:0A3F: A0 00        SORT11  LDY     #0              ;clear index
   510 00:0A41: B1 47        SORT2   LDA     (CURADR),Y      ;compare first
   511 00:0A43: D1 49                CMP     (NXTADR),Y      ;to next
   512 00:0A45: D0 08                BNE     SORT21          ;jump if not same
   513 00:0A47: C8                   INY                     ;else bump index
   514 00:0A48: CC 03 08             CPY     symlen          ;if still small
   515 00:0A4B: D0 F4                BNE     SORT2           ;for next
   516 00:0A4D: F0 16                BEQ     SORT3           ;else do next pair
   517 00:0A4F: 90 14        SORT21  BCC     SORT3           ;if order ok do next
   518                        ;switch symbols
   519 00:0A51: AC 03 08             LDY     symlen          ;do symbol and value
   520 00:0A54: C8                   iny
   521 00:0A55: B1 47        RX1     LDA     (CURADR),Y      ;get low
   522 00:0A57: 48                   PHA                     ;save
   523 00:0A58: B1 49                LDA     (NXTADR),Y      ;then move high
   524 00:0A5A: 91 47                STA     (CURADR),Y      ;to low
   525 00:0A5C: 68                   PLA                     ;restore low
   526 00:0A5D: 91 49                STA     (NXTADR),Y      ;move to high
   527 00:0A5F: 88                   DEY                     ;count down
   528 00:0A60: 10 F3                BPL     RX1             ;loop if more
   529 00:0A62: C8                   INY                     ;clear flag
   530 00:0A63: 84 46                STY     SRTFLG          ;to show switch
   531                        ;next pair
   532 00:0A65: A5 49        SORT3   LDA     NXTADR          ;change
   533 00:0A67: 85 47                STA     CURADR          ;pointer
   534 00:0A69: A5 4A                LDA     NXTADR+1        ;to next
   535 00:0A6B: 85 48                STA     CURADR+1        ;symbol
   536 00:0A6D: 20 E8 09             JSR     ADRNS           ;and set next
   537 00:0A70: E6 2C                INC     SYMPTR+1        ;bump
   538 00:0A72: D0 02                BNE     *+4             ;counter
   539 00:0A74: E6 2B                INC     SYMPTR          ;by 1
   540 00:0A76: A5 2B                LDA     SYMPTR          ;if more
   541 00:0A78: C5 00                CMP     n               ;then go
   542 00:0A7A: 90 C3                BCC     SORT11          ;sort more
   543 00:0A7C: A5 2C                LDA     SYMPTR+1        ;do same
   544 00:0A7E: C5 01                CMP     n+1             ;with low
   545 00:0A80: 90 BD                BCC     SORT11          ;part of count
   546 00:0A82: 24 46                BIT     SRTFLG          ;test switch
   547 00:0A84: 10 8E                BPL     SORT0           ;go if was a switch
   548 00:0A86: 60                   RTS                     ;else done
   549                        ;increment line buffer pointer
   550                        ; if x <= maxcl then c=0 else c=1
   551 00:0A87: E8           INCRP   INX
   552 00:0A88: E4 26                CPX     MAXCL
   553 00:0A8A: D0 01                BNE     *+3
  Tue Sep 27 2022  1:06                                                                                                    Page 10


   554 00:0A8C: 18                   CLC
   555 00:0A8D: 60                   RTS
   556                        ;check if EXP is a valid indirect address
   557                        ; if exp < 255 then c=1 else c=0
   558 00:0A8E: A5 23        INDADR  LDA     EXP             ;if exp>255 is too big
   559 00:0A90: F0 02                BEQ     *+4
   560 00:0A92: 18                   CLC
   561 00:0A93: 60                   RTS
   562 00:0A94: A5 24                LDA     EXP+1           ;if exp=255 is too big
   563 00:0A96: C9 FF                CMP     #255
   564 00:0A98: F0 F8                BEQ     *-6
   565 00:0A9A: 38                   SEC
   566 00:0A9B: 60                   RTS
   567                        ;check if a relative branch is out of range
   568                        ; temp must = pc and exp must = dest addr
   569                        ; if valid then c=1 else c=0
   570 00:0A9C: 18           RELADR  CLC                     ;compute relative offset
   571 00:0A9D: A5 3D                LDA     TEMP
   572 00:0A9F: 69 02                ADC     #2
   573 00:0AA1: 85 40                STA     TEMB+1
   574 00:0AA3: A5 3E                LDA     TEMP+1
   575 00:0AA5: 69 00                ADC     #0
   576 00:0AA7: 85 3F                STA     TEMB
   577 00:0AA9: 38                   SEC
   578 00:0AAA: A5 24                LDA     EXP+1
   579 00:0AAC: E5 40                SBC     TEMB+1
   580 00:0AAE: 85 24                STA     EXP+1
   581 00:0AB0: A8                   TAY
   582 00:0AB1: A5 23                LDA     EXP
   583 00:0AB3: E5 3F                SBC     TEMB
   584 00:0AB5: 85 23                STA     EXP
   585 00:0AB7: D0 05                BNE     HRA20           ;check for positive out of range
   586 00:0AB9: 98                   TYA
   587 00:0ABA: 30 09                BMI     HRA30
   588 00:0ABC: 38           HRA10   SEC
   589 00:0ABD: 60                   RTS
   590 00:0ABE: C9 FF        HRA20   CMP     #255            ;check for negative out of range
   591 00:0AC0: D0 03                BNE     HRA30
   592 00:0AC2: 98                   TYA
   593 00:0AC3: 30 F7                BMI     HRA10
   594 00:0AC5: 18           HRA30   CLC
   595 00:0AC6: 60                   RTS
   596                        ;find next non-blank
   597                        ; if found then c=1 else c=0
   598 00:0AC7: A5 26        FNDNB   LDA     MAXCL           ;if max >127
   599 00:0AC9: 30 18                BMI     J30             ;is no good
   600 00:0ACB: A6 1E                LDX     COLP            ;get col pointer
   601 00:0ACD: E4 26        J10     CPX     MAXCL           ;if pointer <= maxcl
   602 00:0ACF: F0 02                BEQ     *+4             ;branch if equal
   603 00:0AD1: B0 10                BCS     J30             ;branch if >
   604 00:0AD3: BD 4C 2E             LDA     LINE,X          ;get char
   605 00:0AD6: C9 20                CMP     #BLANK          ;if a blank
   606 00:0AD8: F0 04                BEQ     *+6             ;then branch
   607 00:0ADA: 86 1F                STX     CSB             ;else save pointer in csb
   608 00:0ADC: 38                   SEC
   609 00:0ADD: 60                   RTS
   610 00:0ADE: E8                   INX                     ;bump pointer
   611 00:0ADF: 86 1E                STX     COLP
   612 00:0AE1: D0 EA                BNE     J10             ;loop always
   613                        ;did not find a non-blank
   614 00:0AE3: 18           J30     CLC                     ;was all blanks
   615 00:0AE4: 60                   RTS
   616                        ;find end of current string
  Tue Sep 27 2022  1:06                                                                                                    Page 11


   617                        ;  if found then c=1 else c=0
   618 00:0AE5: A0 00        FNDEN   LDY     #0
   619 00:0AE7: 84 21                STY     CSL
   620 00:0AE9: A6 1E                LDX     COLP            ;get pointer
   621 00:0AEB: E4 26        I10     CPX     MAXCL           ;test against max
   622 00:0AED: F0 02                BEQ     *+4             ;branch if ok
   623 00:0AEF: B0 18                BCS     I30             ;branch if too big
   624 00:0AF1: BD 4C 2E             LDA     LINE,X          ;get char
   625 00:0AF4: C9 20                CMP     #BLANK          ;if a blank
   626 00:0AF6: F0 08                BEQ     I20             ;then branch
   627 00:0AF8: C9 3D                CMP     #'='            ;if an =
   628 00:0AFA: F0 04                BEQ     I20             ;then branch
   629 00:0AFC: C9 3B                CMP     #semico         ;if not a semi
   630 00:0AFE: D0 0F                BNE     I40             ;then branch
   631 00:0B00: C0 00        I20     CPY     #0              ;is y=0
   632 00:0B02: D0 16                BNE     I60             ;branch if not
   633 00:0B04: CA           I25     DEX
   634 00:0B05: 86 20                STX     CSE             ;update end of string
   635 00:0B07: 38                   SEC
   636 00:0B08: 60                   RTS
   637 00:0B09: C0 00        I30     CPY     #0
   638 00:0B0B: F0 F7                BEQ     I25
   639 00:0B0D: 18                   CLC
   640 00:0B0E: 60                   RTS
   641 00:0B0F: C9 27        I40     CMP     #apost          ;is it an apostrophe
   642 00:0B11: D0 07                BNE     I60             ;branch if not
   643 00:0B13: C8                   INY                     ;else bump temp
   644 00:0B14: C0 02                CPY     #2              ;if 2
   645 00:0B16: D0 02                BNE     I60             ;continue else
   646 00:0B18: A0 00                LDY     #0              ;reset temp
   647 00:0B1A: E8           I60     INX                     ;bump pointer
   648 00:0B1B: E6 21                INC     CSL
   649 00:0B1D: D0 CC                BNE     I10             ;loop always
   650                        ;find non-embedded comma or right paren
   651                        ; if found then c=1 else c=0
   652 00:0B1F: A6 1E        FNCMP   LDX     COLP            ;get pointer
   653 00:0B21: E4 26        K40     CPX     MAXCL           ;compare to max
   654 00:0B23: F0 02                BEQ     *+4
   655 00:0B25: B0 2E                BCS     K10             ;end of line
   656 00:0B27: BD 4C 2E             LDA     LINE,X          ;get char
   657 00:0B2A: C9 27                CMP     #apost          ;if not string start
   658 00:0B2C: D0 13                BNE     K20             ;branch
   659 00:0B2E: 20 87 0A     K30     JSR     INCRP           ;skip over string
   660 00:0B31: 86 1E                STX     COLP
   661 00:0B33: B0 20                BCS     K10
   662 00:0B35: BD 4C 2E             LDA     LINE,X          ;get new char
   663 00:0B38: C9 27                CMP     #apost          ;if not apostrophe
   664 00:0B3A: D0 F2                BNE     K30             ;then branch
   665 00:0B3C: E8                   INX
   666 00:0B3D: 86 1E                STX     COLP            ;bump pointer
   667 00:0B3F: D0 E0                BNE     K40
   668 00:0B41: BD 4C 2E     K20     LDA     LINE,X          ;get char
   669 00:0B44: C9 20                CMP     #BLANK          ;if blank
   670 00:0B46: F0 0D                BEQ     K10             ;done
   671 00:0B48: C9 29                CMP     #')'
   672 00:0B4A: F0 0A                BEQ     K15
   673 00:0B4C: C9 2C                CMP     #','
   674 00:0B4E: F0 06                BEQ     K15
   675 00:0B50: E8                   INX
   676 00:0B51: 86 1E                STX     COLP            ;bump pointer
   677 00:0B53: D0 CC                BNE     K40
   678 00:0B55: 18           K10     CLC                     ;error
   679 00:0B56: 60           K15     RTS
  Tue Sep 27 2022  1:06                                                                                                    Page 12


   680                        ;test a char to see if alphanumeric
   681                        ; if alphanumeric then c=1 else c=0
   682 00:0B57: 20 5D 0B     ALNUM   JSR     ALPH
   683 00:0B5A: 90 10                BCC     NUMRC
   684 00:0B5C: 60                   RTS
   685                        ;test a char to see if alpha
   686                        ; if alpha then c=1 else c=0
   687 00:0B5D: BD 4C 2E     ALPH    LDA     LINE,X          ;get char
   688 00:0B60: C9 41                CMP     #'A'            ;if less than A
   689 00:0B62: 90 05                BCC     *+7             ;not alpha
   690 00:0B64: C9 5B                CMP     #'Z'+1          ;if less than Z+1
   691 00:0B66: 90 02                BCC     *+4             ;is alpha
   692 00:0B68: 18                   CLC                     ;not alpha
   693 00:0B69: 60                   RTS
   694 00:0B6A: 38                   SEC                     ;alpha
   695 00:0B6B: 60                   RTS
   696                        ;test a char to see if number
   697                        ; if number then c=1 else c=0
   698 00:0B6C: BD 4C 2E     NUMRC   LDA     LINE,X          ;get char
   699 00:0B6F: C9 30                CMP     #'0'            ;if less than 0
   700 00:0B71: 90 05                BCC     *+7             ;not number
   701 00:0B73: C9 3A                CMP     #'9'+1          ;if less than 9+1
   702 00:0B75: 90 02                BCC     *+4             ;is a number
   703 00:0B77: 18                   CLC                     ;not number
   704 00:0B78: 60                   RTS
   705 00:0B79: 38                   SEC                     ;number
   706 00:0B7A: 60                   RTS
   707                        ;construct a symbol
   708                        ; if non-alpha char then c=0 else c=1
   709 00:0B7B: A0 FF        CONSYM  LDY     #$FF            ;use y as counter
   710 00:0B7D: C8           C10     INY                     ;bump y
   711 00:0B7E: CC 03 08             CPY     symlen          ;and test
   712 00:0B81: F0 0A                BEQ     C15
   713 00:0B83: C4 2D                CPY     LEN             ;if all char in symbol
   714 00:0B85: B0 10                BCS     C30             ;go fill blanks
   715 00:0B87: 20 57 0B             JSR     ALNUM
   716 00:0B8A: B0 02                BCS     C20
   717 00:0B8C: 18                   CLC                     ;non-alphanumeric
   718 00:0B8D: 60           C15     RTS
   719 00:0B8E: BD 4C 2E     C20     LDA     LINE,X          ;get char
   720 00:0B91: 99 00 2F             STA     SYM,Y
   721 00:0B94: E8                   INX                     ;bump pointer
   722 00:0B95: B0 E6                BCS     C10
   723 00:0B97: A9 20        C30     LDA     #BLANK          ;fill in blanks
   724 00:0B99: 99 00 2F             STA     SYM,Y
   725 00:0B9C: B0 DF                BCS     C10
   726                        ;evaluate expression
   727                        ; on exit ercol points to bad char if any
   728                        ;         x points to next char if good expr
   729                        ;         return is set as follows
   730                        ;          -1 if ok and exp is set to value
   731                        ;           0 if undefined symbol
   732                        ;           1 if uninterpretable
   733 00:0B9E: A9 00        EVAL    LDA     #0              ;initialize
   734 00:0BA0: 85 23                STA     EXP
   735 00:0BA2: 85 24                STA     EXP+1
   736 00:0BA4: A9 01                LDA     #1
   737 00:0BA6: 85 34                STA     RETURN
   738 00:0BA8: A9 FE                LDA     #%11111110      ;set sign to plus
   739 00:0BAA: 25 1D                AND     FLAGS+1
   740 00:0BAC: 85 1D                STA     FLAGS+1
   741 00:0BAE: 86 3B                STX     ERCOL
   742 00:0BB0: 86 3A                STX     J
  Tue Sep 27 2022  1:06                                                                                                    Page 13


   743 00:0BB2: 20 58 0E             JSR     ENDTST          ;if more
   744 00:0BB5: 90 01                BCC     *+3             ;continue
   745 00:0BB7: 60                   RTS
   746                        ;get initial operation
   747 00:0BB8: A0 2B                LDY     #'+'            ;set to plus
   748 00:0BBA: C9 2D                CMP     #'-'            ;if not minus
   749 00:0BBC: D0 07                BNE     D15             ;ok
   750 00:0BBE: A8                   TAY                     ;set to minus
   751 00:0BBF: 20 87 0A     D11A    JSR     INCRP           ;point to next char
   752 00:0BC2: 90 01                BCC     D15
   753 00:0BC4: 60                   RTS
   754 00:0BC5: 84 2F        D15     STY     OP              ;save oper
   755 00:0BC7: 86 3B                STX     ERCOL
   756 00:0BC9: A9 00                LDA     #0              ;initialize
   757 00:0BCB: 85 30                STA     LOW             ;flags
   758 00:0BCD: 85 31                STA     HIGH
   759 00:0BCF: 20 58 0E             JSR     ENDTST          ;if more
   760 00:0BD2: 90 01                BCC     *+3             ;continue
   761 00:0BD4: 60                   RTS
   762 00:0BD5: C9 3C                CMP     #'<'            ;if not <
   763 00:0BD7: D0 04                BNE     D150
   764 00:0BD9: E6 30                INC     LOW             ;else bump low
   765 00:0BDB: D0 06                BNE     D151
   766 00:0BDD: C9 3E        D150    CMP     #'>'            ;if not >
   767 00:0BDF: D0 08                BNE     D158
   768 00:0BE1: E6 31                INC     HIGH
   769 00:0BE3: 20 87 0A     D151    JSR     INCRP
   770 00:0BE6: 90 01                BCC     D158
   771 00:0BE8: 60                   RTS
   772 00:0BE9: 86 3B        D158    STX     ERCOL
   773 00:0BEB: 20 6C 0B             JSR     NUMRC           ;is char a number
   774 00:0BEE: 90 05                BCC     *+7             ;no - not base 10
   775 00:0BF0: A0 0A                LDY     #10             ;is base 10
   776 00:0BF2: 4C BB 0C             JMP     D55             ;get char and eval
   777 00:0BF5: C9 24                CMP     #'$'            ;is char a $
   778 00:0BF7: D0 05                BNE     *+7             ;no - not hex
   779 00:0BF9: A0 10                LDY     #16             ;else is hex
   780 00:0BFB: 4C AD 0C             JMP     D50             ;go evaluate
   781 00:0BFE: C9 40                CMP     #'@'            ;is char a @
   782 00:0C00: D0 05                BNE     *+7             ;no - not octal
   783 00:0C02: A0 08                LDY     #8              ;else is octal
   784 00:0C04: 4C AD 0C             JMP     D50             ;go evaluate
   785 00:0C07: C9 25                CMP     #'%'            ;is char a %
   786 00:0C09: D0 05                BNE     *+7             ;no - not base 2
   787 00:0C0B: A0 02                LDY     #2              ;else is binary
   788 00:0C0D: 4C AD 0C             JMP     D50             ;go evaluate
   789 00:0C10: 20 5D 0B             JSR     ALPH            ;is it alpha
   790 00:0C13: 90 47                BCC     D46             ;no check for pc
   791                        ;process a symbol
   792 00:0C15: 20 07 0E             JSR     FNDLN           ;find length
   793 00:0C18: 38                   sec                     ;drop by one
   794 00:0C19: E9 01                sbc     #1
   795 00:0C1B: CD 03 08             CMP     symlen          ;if not too big
   796 00:0C1E: 90 01                BCC     D43             ;continue
   797 00:0C20: 60                   RTS
   798 00:0C21: 20 7B 0B     D43     JSR     CONSYM          ;construct symbol
   799 00:0C24: 20 0E 0F             JSR     FIND
   800 00:0C27: 90 03                BCC     *+5
   801 00:0C29: 4C C6 0C             JMP     D60
   802 00:0C2C: 70 03                BVS     *+5             ;branch if not defined
   803 00:0C2E: 20 75 0F             JSR     SETCHN          ;create it
   804 00:0C31: A5 29                LDA     BYWOR           ;if .byt or .wor
   805 00:0C33: D0 1F                BNE     D44E            ;branch
  Tue Sep 27 2022  1:06                                                                                                    Page 14


   806 00:0C35: A5 28                LDA     ORG             ;if equ or org
   807 00:0C37: D0 1B                BNE     D44E            ;branch
   808 00:0C39: A5 24                LDA     EXP+1           ;error if expr
   809 00:0C3B: D0 1E                BNE     D452
   810 00:0C3D: A5 23                LDA     EXP
   811 00:0C3F: D0 1A                BNE     D452
   812 00:0C41: A5 2F                LDA     OP              ;error if not +
   813 00:0C43: C9 2B                CMP     #'+'
   814 00:0C45: D0 10                BNE     D44F
   815 00:0C47: 86 3B                STX     ERCOL
   816 00:0C49: CA                   DEX                     ;error if expr after symbol
   817 00:0C4A: 20 87 0A             JSR     INCRP
   818 00:0C4D: B0 05                BCS     D44E
   819 00:0C4F: 20 58 0E             JSR     ENDTST
   820 00:0C52: 90 07                BCC     D452
   821 00:0C54: 4C 02 0E     D44E    JMP     D200
   822 00:0C57: A6 3A        D44F    LDX     J
   823 00:0C59: 86 3B                STX     ERCOL
   824 00:0C5B: 60           D452    RTS
   825                        ;evaluate field with pc (*)
   826 00:0C5C: C9 2A        D46     CMP     #'*'            ;if not asterix
   827 00:0C5E: D0 0B                BNE     D47             ;continue
   828 00:0C60: A5 1A                LDA     PC              ;save pc
   829 00:0C62: 85 33                STA     VAL+1           ;in
   830 00:0C64: A5 1B                LDA     PC+1            ;value
   831 00:0C66: 85 32                STA     VAL
   832 00:0C68: E8                   INX                     ;next char
   833 00:0C69: D0 5B                BNE     D60             ;do op
   834                        ;get a single char
   835 00:0C6B: C9 27        D47     CMP     #apost          ;if '
   836 00:0C6D: F0 01                BEQ     *+3             ;maybe ok
   837 00:0C6F: 60                   RTS
   838 00:0C70: 20 87 0A             JSR     INCRP           ;next pos
   839 00:0C73: 90 01                BCC     *+3             ;not end
   840 00:0C75: 60                   RTS
   841 00:0C76: BD 4C 2E             LDA     LINE,X          ;get char
   842 00:0C79: C9 27                CMP     #apost          ;see if another apost
   843 00:0C7B: D0 0C                BNE     D47A            ;branch if not
   844 00:0C7D: 20 87 0A             JSR     INCRP           ;bump x
   845 00:0C80: B0 25                BCS     STROPR          ;error if end
   846 00:0C82: BD 4C 2E             LDA     LINE,X          ;now get next
   847 00:0C85: C9 27                CMP     #apost          ;see if apost again
   848 00:0C87: D0 1E                BNE     STROPR          ;branch if is
   849 00:0C89: 85 33        D47A    STA     VAL+1           ;store
   850 00:0C8B: A9 00                LDA     #0              ;clear
   851 00:0C8D: 85 32                STA     VAL             ;high
   852 00:0C8F: 20 87 0A             JSR     INCRP           ;next
   853 00:0C92: B0 32                BCS     D60
   854 00:0C94: BD 4C 2E             LDA     LINE,X          ;get char
   855 00:0C97: C9 27                CMP     #apost          ;if '
   856 00:0C99: D0 0C                BNE     STROPR
   857 00:0C9B: 20 87 0A             JSR     INCRP
   858 00:0C9E: B0 26                BCS     D60
   859 00:0CA0: BD 4C 2E             LDA     LINE,X
   860 00:0CA3: C9 27                CMP     #apost
   861 00:0CA5: D0 1F                BNE     D60
   862 00:0CA7: A6 3B        STROPR  LDX     ERCOL
   863 00:0CA9: 60                   RTS
   864 00:0CAA: E8                   INX                     ;next pos
   865 00:0CAB: D0 19                BNE     D60             ;do oper
   866                        ;evaluate numeric field
   867 00:0CAD: 20 87 0A     D50     JSR     INCRP           ;next char
   868 00:0CB0: 90 01                BCC     *+3             ;continue if ok
  Tue Sep 27 2022  1:06                                                                                                    Page 15


   869 00:0CB2: 60                   RTS
   870 00:0CB3: 86 3B                STX     ERCOL
   871 00:0CB5: 20 57 0B             JSR     ALNUM
   872 00:0CB8: B0 01                BCS     D55             ;if number continue
   873 00:0CBA: 60                   RTS
   874 00:0CBB: 84 2E        D55     STY     BASE            ;save base
   875                        ;get length
   876 00:0CBD: 20 07 0E             JSR     FNDLN           ;point to next
   877                        ;compute value
   878 00:0CC0: 20 6D 0E             JSR     NUMBER          ;compute
   879 00:0CC3: B0 01                BCS     D60             ;continue if ok
   880 00:0CC5: 60                   RTS
   881                        ;do oper
   882 00:0CC6: A5 30        D60     LDA     LOW             ;low only?
   883 00:0CC8: F0 06                BEQ     D68             ;no so junp
   884 00:0CCA: A9 00                LDA     #0              ;is ow only so clear high
   885 00:0CCC: 85 32                STA     VAL
   886 00:0CCE: F0 0C                BEQ     D69
   887 00:0CD0: A5 31        D68     LDA     HIGH            ;high only?
   888 00:0CD2: F0 08                BEQ     D69             ;no
   889 00:0CD4: A5 32                LDA     VAL             ;is so put high
   890 00:0CD6: 85 33                STA     VAL+1           ;in low
   891 00:0CD8: A9 00                LDA     #0              ;clear high
   892 00:0CDA: 85 32                STA     VAL
   893 00:0CDC: A5 2F        D69     LDA     OP              ;get oper
   894 00:0CDE: C9 2B                CMP     #'+'            ;if not add
   895 00:0CE0: D0 3A                BNE     D65             ;branch
   896                        ;add operation
   897 00:0CE2: A5 24                LDA     EXP+1           ;get low
   898 00:0CE4: 18                   CLC                     ;add
   899 00:0CE5: 65 33                ADC     VAL+1           ;low of number
   900 00:0CE7: 85 24                STA     EXP+1           ;save
   901 00:0CE9: A5 23                LDA     EXP             ;then do
   902 00:0CEB: 65 32                ADC     VAL             ;same for
   903 00:0CED: 85 23                STA     EXP             ;high
   904 00:0CEF: A9 00                LDA     #0              ;put carry
   905 00:0CF1: 2A                   ROL     A               ;in A
   906 00:0CF2: A8                   TAY                     ;then Y
   907 00:0CF3: 20 1A 0E             JSR     CMPSGN          ;compare signs
   908 00:0CF6: D0 0F                BNE     D62             ;branch if different
   909 00:0CF8: 98                   TYA                     ;if carry
   910 00:0CF9: D0 03                BNE     D61             ;then overflow
   911 00:0CFB: 4C EA 0D             JMP     D70             ;else continue
   912 00:0CFE: A9 08        D61     LDA     #8              ;get overflow mask
   913 00:0D00: 05 1D                ORA     FLAGS+1         ;set flag
   914 00:0D02: 85 1D                STA     FLAGS+1         ;save
   915 00:0D04: 4C EA 0D             JMP     D70             ;continue
   916 00:0D07: 98           D62     TYA                     ;check carry
   917 00:0D08: F0 09                BEQ     D63             ;if none is neg
   918 00:0D0A: A9 FE                LDA     #254            ;get pos mask
   919 00:0D0C: 25 1D                AND     FLAGS+1         ;set
   920 00:0D0E: 85 1D                STA     FLAGS+1         ;save
   921 00:0D10: 4C EA 0D             JMP     D70
   922 00:0D13: A9 01        D63     LDA     #1              ;negative mask
   923 00:0D15: 05 1D                ORA     FLAGS+1         ;set sign
   924 00:0D17: 85 1D                STA     FLAGS+1         ;save
   925 00:0D19: 4C EA 0D             JMP     D70             ;continue
   926 00:0D1C: C9 2D        D65     CMP     #'-'            ;if not -
   927 00:0D1E: D0 41                BNE     TRYMUL          ;try mult
   928                        ;subtract operation section
   929 00:0D20: A5 24                LDA     EXP+1           ;get low
   930 00:0D22: 38                   SEC                     ;subtract
   931 00:0D23: E5 33                SBC     VAL+1           ;number
  Tue Sep 27 2022  1:06                                                                                                    Page 16


   932 00:0D25: 85 24                STA     EXP+1           ;save
   933 00:0D27: A5 23                LDA     EXP             ;do
   934 00:0D29: E5 32                SBC     VAL             ;same
   935 00:0D2B: 85 23                STA     EXP             ;for high
   936 00:0D2D: A9 00                LDA     #0              ;save
   937 00:0D2F: 2A                   ROL     A               ;carry
   938 00:0D30: A8                   TAY
   939 00:0D31: 20 1A 0E             JSR     CMPSGN          ;compare signs
   940 00:0D34: D0 15                BNE     D67             ;branch if different
   941 00:0D36: 98                   TYA                     ;get carry
   942 00:0D37: F0 09                BEQ     D66             ;if none branch
   943 00:0D39: A9 FE                LDA     #254            ;set pos
   944 00:0D3B: 25 1D                AND     FLAGS+1         ;mask
   945 00:0D3D: 85 1D                STA     FLAGS+1         ;for expr
   946 00:0D3F: 4C EA 0D             JMP     D70             ;continue
   947 00:0D42: A9 01        D66     LDA     #1              ;set neg
   948 00:0D44: 05 1D                ORA     FLAGS+1         ;mask
   949 00:0D46: 85 1D                STA     FLAGS+1         ;for expr
   950 00:0D48: 4C EA 0D             JMP     D70             ;continue
   951 00:0D4B: 84 3D        D67     STY     TEMP            ;save carry
   952 00:0D4D: A9 01                LDA     #1              ;get exp
   953 00:0D4F: 25 1D                AND     FLAGS+1         ;sign
   954 00:0D51: 45 3D                EOR     TEMP            ;compare to carry
   955 00:0D53: D0 03                BNE     *+5             ;branch if not equal
   956 00:0D55: 4C EA 0D             JMP     D70             ;else continue
   957 00:0D58: A9 08                LDA     #8              ;load
   958 00:0D5A: 05 1D                ORA     FLAGS+1         ;overflow mask
   959 00:0D5C: 85 1D                STA     FLAGS+1         ;for exp
   960 00:0D5E: 4C EA 0D             JMP     D70
   961 00:0D61: C9 2A        TRYMUL  CMP     #'*'            ;if not mult
   962 00:0D63: D0 4E                BNE     TRYDIV          ;try division
   963                        ;multiplication operation
   964 00:0D65: A9 00                LDA     #0              ;clear
   965 00:0D67: 85 6F                STA     ACC+1           ;accum
   966 00:0D69: 85 6E                STA     ACC
   967 00:0D6B: 20 28 0E             JSR     SMEXP           ;make exp sign/magn
   968 00:0D6E: 20 40 0E             JSR     SMVAL           ;same for val
   969 00:0D71: 8A                   TXA                     ;save
   970 00:0D72: 48                   PHA                     ;current index
   971 00:0D73: A2 10                LDX     #16             ;do 16 bits
   972 00:0D75: 46 32        MULLPE  LSR     VAL             ;shift mult
   973 00:0D77: 66 33                ROR     VAL+1           ;right
   974 00:0D79: 90 0D                BCC     NOADD           ;if zero no add
   975 00:0D7B: 18                   CLC                     ;else
   976 00:0D7C: A5 6F                LDA     ACC+1           ;get accum
   977 00:0D7E: 65 24                ADC     EXP+1           ;add exp
   978 00:0D80: 85 6F                STA     ACC+1           ;save
   979 00:0D82: A5 6E                LDA     ACC             ;same
   980 00:0D84: 65 23                ADC     EXP             ;for
   981 00:0D86: 85 6E                STA     ACC             ;high
   982 00:0D88: 06 24        NOADD   ASL     EXP+1           ;mult exp
   983 00:0D8A: 26 23                ROL     EXP             ;by two
   984 00:0D8C: CA                   DEX                     ;count down
   985 00:0D8D: D0 E6                BNE     MULLPE          ;loop if more
   986 00:0D8F: 68                   PLA                     ;restore
   987 00:0D90: AA                   TAX                     ;x
   988 00:0D91: A5 6F        ENDMUL  LDA     ACC+1           ;set
   989 00:0D93: 85 24                STA     EXP+1           ;exp
   990 00:0D95: A5 6E                LDA     ACC             ;to accum
   991 00:0D97: 85 23                STA     EXP             ;value
   992 00:0D99: 20 1A 0E             JSR     CMPSGN          ;compare signs
   993 00:0D9C: D0 09                BNE     EXPNEG          ;negative
   994 00:0D9E: A9 FE                LDA     #254            ;else
  Tue Sep 27 2022  1:06                                                                                                    Page 17


   995 00:0DA0: 25 1D                AND     FLAGS+1         ;positive
   996 00:0DA2: 85 1D                STA     FLAGS+1         ;result
   997 00:0DA4: 4C EA 0D             JMP     D70
   998 00:0DA7: A9 01        EXPNEG  LDA     #1              ;set sign
   999 00:0DA9: 05 1D                ORA     FLAGS+1         ;to neg
  1000 00:0DAB: 85 1D                STA     FLAGS+1         ;in flags
  1001 00:0DAD: 20 2E 0E             JSR     TCPEXP          ;make twos compl
  1002 00:0DB0: 4C EA 0D             JMP     D70             ;continue
  1003 00:0DB3: C9 2F        TRYDIV  CMP     #'/'            ;if not div
  1004 00:0DB5: F0 05                BEQ     DODIV           ;error else ok
  1005 00:0DB7: A6 3A                LDX     J
  1006 00:0DB9: 86 3B                STX     ERCOL
  1007 00:0DBB: 60                   RTS
  1008                        ;division operation
  1009 00:0DBC: A9 00        DODIV   LDA     #0              ;clear
  1010 00:0DBE: 85 6F                STA     ACC+1           ;accum
  1011 00:0DC0: 85 6E                STA     ACC
  1012 00:0DC2: 20 28 0E             JSR     SMEXP           ;convert
  1013 00:0DC5: 20 40 0E             JSR     SMVAL           ;to sign/magn
  1014 00:0DC8: A5 33                LDA     VAL+1           ;if divisor
  1015 00:0DCA: 05 32                ORA     VAL             ;not zero
  1016 00:0DCC: D0 05                BNE     DIVLPE          ;then ok
  1017 00:0DCE: A6 3A                LDX     J
  1018 00:0DD0: 86 3B                STX     ERCOL
  1019 00:0DD2: 60                   RTS
  1020 00:0DD3: 38           DIVLPE  SEC                     ;subtract
  1021 00:0DD4: A5 24                LDA     EXP+1           ;val
  1022 00:0DD6: E5 33                SBC     VAL+1           ;from exp
  1023 00:0DD8: 85 24                STA     EXP+1           ;until
  1024 00:0DDA: A5 23                LDA     EXP             ;a
  1025 00:0DDC: E5 32                SBC     VAL             ;borrow
  1026 00:0DDE: 85 23                STA     EXP
  1027 00:0DE0: 90 AF                BCC     ENDMUL          ;then done
  1028 00:0DE2: E6 6F                INC     ACC+1           ;bump low
  1029 00:0DE4: D0 ED                BNE     DIVLPE          ;loop if no carry
  1030 00:0DE6: E6 6E                INC     ACC             ;else bump high
  1031 00:0DE8: D0 E9                BNE     DIVLPE          ;loop always
  1032                        ;end oper
  1033 00:0DEA: E4 26        D70     CPX     MAXCL           ;see if end
  1034 00:0DEC: F0 02                BEQ     D71             ;no
  1035 00:0DEE: 10 0D                BPL     D100            ;yes done
  1036 00:0DF0: 20 58 0E     D71     JSR     ENDTST          ;at end of expr
  1037 00:0DF3: B0 08                BCS     D100            ;yes but bad
  1038 00:0DF5: BC 4C 2E             LDY     LINE,X          ;get op
  1039 00:0DF8: 86 3A                STX     J
  1040 00:0DFA: 4C BF 0B             JMP     D11A            ;start over
  1041                        ;exits
  1042 00:0DFD: A9 FF        D100    LDA     #255            ;good
  1043 00:0DFF: 85 34                STA     RETURN          ;return
  1044 00:0E01: 60                   RTS
  1045 00:0E02: A9 00        D200    LDA     #0              ;undefined
  1046 00:0E04: 85 34                STA     RETURN          ;symbol
  1047 00:0E06: 60                   RTS
  1048                        ;finds length of field
  1049                        ; loops until non-alphanumeric found
  1050                        ; ercol must = x
  1051                        ; result in len
  1052 00:0E07: 20 87 0A     FNDLN   JSR     INCRP           ;bump pointer
  1053 00:0E0A: B0 05                BCS     HLN220
  1054 00:0E0C: 20 57 0B             JSR     ALNUM
  1055 00:0E0F: B0 F6                BCS     FNDLN
  1056 00:0E11: 8A           HLN220  TXA                     ;get ending
  1057 00:0E12: 38                   SEC                     ;subtract
  Tue Sep 27 2022  1:06                                                                                                    Page 18


  1058 00:0E13: E5 3B                SBC     ERCOL           ;start
  1059 00:0E15: 85 2D                STA     LEN             ;save answer
  1060 00:0E17: A6 3B                LDX     ERCOL
  1061 00:0E19: 60                   RTS
  1062                        ;compare signs of exp and val
  1063 00:0E1A: A9 01        CMPSGN  LDA     #1              ;get sign
  1064 00:0E1C: 25 1D                AND     FLAGS+1         ;of exp
  1065 00:0E1E: 0A                   ASL     A               ;move to val pos
  1066 00:0E1F: 85 3D                STA     TEMP            ;save
  1067 00:0E21: A9 02                LDA     #2              ;get sign
  1068 00:0E23: 25 1D                AND     FLAGS+1         ;of val
  1069 00:0E25: 45 3D                EOR     TEMP            ;see if different
  1070 00:0E27: 60                   RTS
  1071                        ;convert exp to sign/magn
  1072 00:0E28: A9 01        SMEXP   LDA     #1              ;get
  1073 00:0E2A: 25 1D                AND     FLAGS+1         ;sign
  1074 00:0E2C: F0 11                BEQ     SM1             ;done if
  1075                        ;convert expr
  1076 00:0E2E: 18           TCPEXP  CLC                     ;else do
  1077 00:0E2F: A5 24                LDA     EXP+1           ;a
  1078 00:0E31: 49 FF                EOR     #$FF            ;two's
  1079 00:0E33: 69 01                ADC     #1              ;complement
  1080 00:0E35: 85 24                STA     EXP+1
  1081 00:0E37: A5 23                LDA     EXP
  1082 00:0E39: 49 FF                EOR     #$FF
  1083 00:0E3B: 69 00                ADC     #0
  1084 00:0E3D: 85 23                STA     EXP
  1085 00:0E3F: 60           SM1     RTS
  1086                        ;convert val to sign/magn
  1087 00:0E40: A9 02        SMVAL   LDA     #2              ;get
  1088 00:0E42: 25 1D                AND     FLAGS+1         ;sign
  1089 00:0E44: F0 F9                BEQ     SM1             ;done if +
  1090 00:0E46: 18                   CLC                     ;else do
  1091 00:0E47: A5 33                LDA     VAL+1           ;a
  1092 00:0E49: 49 FF                EOR     #$FF            ;two's
  1093 00:0E4B: 69 01                ADC     #1              ;complement
  1094 00:0E4D: 85 33                STA     VAL+1
  1095 00:0E4F: A5 32                LDA     VAL
  1096 00:0E51: 49 FF                EOR     #$FF
  1097 00:0E53: 69 00                ADC     #0
  1098 00:0E55: 85 32                STA     VAL
  1099 00:0E57: 60                   RTS
  1100                        ;test for end of string
  1101                        ; if found then c=1 else c=0
  1102 00:0E58: BD 4C 2E     ENDTST  LDA     LINE,X          ;get char
  1103 00:0E5B: C9 20                CMP     #blank          ;if blank
  1104 00:0E5D: F0 0D                BEQ     DD10            ;set carry
  1105 00:0E5F: C9 2C                CMP     #','            ;if comma
  1106 00:0E61: F0 09                BEQ     DD10            ;set carry
  1107 00:0E63: C9 29                CMP     #')'            ;if right paren
  1108 00:0E65: F0 05                BEQ     DD10            ;set carry
  1109 00:0E67: C9 3B                CMP     #semico         ;if semi
  1110 00:0E69: F0 01                BEQ     DD10            ;set carry
  1111 00:0E6B: 18                   CLC                     ;else clear
  1112 00:0E6C: 60           DD10    RTS
  1113                        ;convert input string to number
  1114                        ; if ok then c=1 else c=0
  1115 00:0E6D: A9 00        NUMBER  LDA     #0              ;clear
  1116 00:0E6F: 85 32                STA     VAL             ;value
  1117 00:0E71: 85 33                STA     VAL+1
  1118 00:0E73: BD 4C 2E     E10     LDA     LINE,X          ;get char
  1119 00:0E76: 20 6C 0B             JSR     NUMRC           ;if not number
  1120 00:0E79: 90 04                BCC     E20             ;then branch
  Tue Sep 27 2022  1:06                                                                                                    Page 19


  1121 00:0E7B: 29 0F                AND     #$F             ;remove zone
  1122 00:0E7D: 10 08                BPL     E30             ;jump
  1123 00:0E7F: 20 5D 0B     E20     JSR     ALPH            ;if not alpha
  1124 00:0E82: 90 07                BCC     E40             ;is error
  1125 00:0E84: 38                   SEC
  1126 00:0E85: E9 37                SBC     #$37            ;remove zone
  1127 00:0E87: C5 2E        E30     CMP     BASE            ;is base valid
  1128 00:0E89: 90 02                BCC     E50             ;yes
  1129 00:0E8B: 18           E40     CLC                     ;else bad base
  1130 00:0E8C: 60                   RTS
  1131 00:0E8D: 85 13        E50     STA     COLCNT
  1132 00:0E8F: 8A                   TXA
  1133 00:0E90: 48                   PHA
  1134 00:0E91: A4 2E                LDY     BASE            ;get base
  1135 00:0E93: C0 02                CPY     #2              ;is it 2
  1136 00:0E95: D0 04                BNE     E60             ;no
  1137 00:0E97: A2 01                LDX     #1              ;shift one
  1138 00:0E99: D0 1E                BNE     E90
  1139 00:0E9B: C0 08        E60     CPY     #8              ;is it 8
  1140 00:0E9D: D0 04                BNE     E70             ;no
  1141 00:0E9F: A2 03                LDX     #3              ;shift three
  1142 00:0EA1: D0 16                BNE     E90
  1143 00:0EA3: C0 10        E70     CPY     #16             ;is it 16
  1144 00:0EA5: D0 04                BNE     E80             ;no
  1145 00:0EA7: A2 04                LDX     #4              ;shift four
  1146 00:0EA9: D0 0E                BNE     E90
  1147 00:0EAB: C0 0A        E80     CPY     #10             ;if not 10
  1148 00:0EAD: D0 DC                BNE     E40             ;is invalid
  1149 00:0EAF: A5 32                LDA     VAL             ;save
  1150 00:0EB1: 85 3D                STA     TEMP            ;val
  1151 00:0EB3: A5 33                LDA     VAL+1
  1152 00:0EB5: 85 3E                STA     TEMP+1
  1153 00:0EB7: A2 03                LDX     #3              ;10 means 3 shifts + 1 shift
  1154 00:0EB9: 06 33        E90     ASL     VAL+1           ;shift
  1155 00:0EBB: 26 32                ROL     VAL             ;left
  1156 00:0EBD: 90 06                BCC     E100            ;branch if no carry
  1157 00:0EBF: A5 1D                LDA     FLAGS+1         ;else overflow
  1158 00:0EC1: 09 08                ORA     #8
  1159 00:0EC3: 85 1D                STA     FLAGS+1
  1160 00:0EC5: CA           E100    DEX                     ;count down
  1161 00:0EC6: D0 F1                BNE     E90             ;loop if more
  1162 00:0EC8: C0 0A                CPY     #10             ;if not base 10
  1163 00:0ECA: D0 21                BNE     E120            ;done
  1164 00:0ECC: 06 3E                ASL     TEMP+1          ;must do another
  1165 00:0ECE: 26 3D                ROL     TEMP
  1166 00:0ED0: 90 06                BCC     E115            ;if clear ok
  1167 00:0ED2: A5 1D                LDA     FLAGS+1         ;else set
  1168 00:0ED4: 09 08                ORA     #8              ;overflow
  1169 00:0ED6: 85 1D                STA     FLAGS+1
  1170 00:0ED8: A5 33        E115    LDA     VAL+1           ;add parts
  1171 00:0EDA: 18                   CLC
  1172 00:0EDB: 65 3E                ADC     TEMP+1
  1173 00:0EDD: 85 33                STA     VAL+1
  1174 00:0EDF: A5 32                LDA     VAL
  1175 00:0EE1: 65 3D                ADC     TEMP
  1176 00:0EE3: 85 32                STA     VAL
  1177 00:0EE5: 90 06                BCC     E120            ;no overflow
  1178 00:0EE7: A5 1D                LDA     FLAGS+1
  1179 00:0EE9: 09 08                ORA     #8              ;set overflow
  1180 00:0EEB: 85 1D                STA     FLAGS+1
  1181 00:0EED: A5 13        E120    LDA     COLCNT          ;get first
  1182 00:0EEF: 18                   CLC                     ;add
  1183 00:0EF0: 65 33                ADC     VAL+1           ;to val
  Tue Sep 27 2022  1:06                                                                                                    Page 20


  1184 00:0EF2: 85 33                STA     VAL+1
  1185 00:0EF4: A5 32                LDA     VAL
  1186 00:0EF6: 69 00                ADC     #0
  1187 00:0EF8: 85 32                STA     VAL
  1188 00:0EFA: 90 06                BCC     E130
  1189 00:0EFC: A5 1D                LDA     FLAGS+1         ;set
  1190 00:0EFE: 09 08                ORA     #8              ;overflow
  1191 00:0F00: 85 1D                STA     FLAGS+1
  1192 00:0F02: 68           E130    PLA
  1193 00:0F03: AA                   TAX
  1194 00:0F04: E8                   INX                     ;bump pointer
  1195 00:0F05: C6 2D                DEC     LEN             ;drop count
  1196 00:0F07: F0 03                BEQ     E140
  1197 00:0F09: 4C 73 0E             JMP     E10             ;loop for more
  1198 00:0F0C: 38           E140    SEC
  1199 00:0F0D: 60                   RTS
  1200                        ;search symbol table
  1201                        ; if found and defined then c=1 and v=0
  1202                        ; if found and not defined then c=0 and v=1
  1203                        ; if not found then c=0 and v=0
  1204                        ; symtbl contains next available address
  1205 00:0F0E: A5 09        FIND    LDA     STSAVE          ;get start
  1206 00:0F10: 85 0D                STA     SYMTBL          ;set pointer
  1207 00:0F12: A5 0A                LDA     STSAVE+1
  1208 00:0F14: 85 0E                STA     SYMTBL+1
  1209 00:0F16: A9 01                LDA     #1
  1210 00:0F18: 85 2C                STA     SYMPTR+1
  1211 00:0F1A: A9 00                LDA     #0
  1212 00:0F1C: 85 2B                STA     SYMPTR
  1213 00:0F1E: B8           G10     CLV
  1214 00:0F1F: A5 2B                LDA     SYMPTR
  1215 00:0F21: C5 16                CMP     NOSYM
  1216 00:0F23: 90 0A                BCC     G20
  1217 00:0F25: D0 2C                BNE     G50
  1218 00:0F27: A5 2C                LDA     SYMPTR+1
  1219 00:0F29: C5 17                CMP     NOSYM+1
  1220 00:0F2B: F0 02                BEQ     G20
  1221 00:0F2D: B0 24                BCS     G50
  1222 00:0F2F: AC 03 08     G20     LDY     symlen          ;get length
  1223 00:0F32: 88                   dey                     ;drop by one
  1224 00:0F33: B1 0D        G30     LDA     (SYMTBL),Y
  1225 00:0F35: 10 05                BPL     G32
  1226 00:0F37: 29 7F                AND     #$7F
  1227 00:0F39: 2C CB 1F             BIT     KLUDG           ;set v
  1228 00:0F3C: D9 00 2F     G32     CMP     SYM,Y
  1229 00:0F3F: D0 14                BNE     G70
  1230 00:0F41: 88                   DEY
  1231 00:0F42: 10 EF                BPL     G30
  1232 00:0F44: AC 03 08             LDY     symlen
  1233 00:0F47: B1 0D                LDA     (SYMTBL),Y
  1234 00:0F49: 85 32                STA     VAL
  1235 00:0F4B: C8                   INY
  1236 00:0F4C: B1 0D                LDA     (SYMTBL),Y
  1237 00:0F4E: 85 33                STA     VAL+1
  1238 00:0F50: 70 01                BVS     G50
  1239 00:0F52: 60                   RTS
  1240 00:0F53: 18           G50     CLC                     ;no match
  1241 00:0F54: 60                   RTS
  1242                        ;try next symbol
  1243 00:0F55: A5 0D        G70     LDA     SYMTBL          ;get low addr
  1244 00:0F57: 18                   CLC                     ;add length
  1245 00:0F58: 6D 03 08             ADC     symlen
  1246 00:0F5B: 85 0D                STA     SYMTBL
  Tue Sep 27 2022  1:06                                                                                                    Page 21


  1247 00:0F5D: 90 02                BCC     g751
  1248 00:0F5F: E6 0E                INC     SYMTBL+1
  1249 00:0F61: 18           g751    clc                     ;add two
  1250 00:0F62: A5 0D                lda     symtbl
  1251 00:0F64: 69 02                adc     #2
  1252 00:0F66: 85 0D                sta     symtbl
  1253 00:0F68: 90 02                bcc     g75             ;skip if no carry
  1254 00:0F6A: E6 0E                inc     symtbl+1
  1255 00:0F6C: E6 2C        G75     INC     SYMPTR+1
  1256 00:0F6E: D0 AE                BNE     G10
  1257 00:0F70: E6 2B                INC     SYMPTR
  1258 00:0F72: 4C 1E 0F             JMP     G10
  1259                        ;create undefined symbol
  1260 00:0F75: A9 FF        SETCHN  LDA     #$FF            ;set
  1261 00:0F77: 85 32                STA     VAL             ;null
  1262 00:0F79: 85 33                STA     VAL+1           ;value
  1263 00:0F7B: AD 00 2F             LDA     SYM             ;set
  1264 00:0F7E: 09 80                ORA     #$80            ;undefined
  1265 00:0F80: 8D 00 2F             STA     SYM             ;flag
  1266                        ;insert a new symbol into table
  1267                        ;if v=1 just update entry with new values
  1268                        ;if v=0 then create new entry by bumping nosym
  1269 00:0F83: A5 0E        INSERT  LDA     SYMTBL+1
  1270 00:0F85: C5 0C                CMP     TBLSZ+1
  1271 00:0F87: 90 08                BCC     G105
  1272 00:0F89: D0 27                BNE     G110
  1273 00:0F8B: A5 0D                LDA     SYMTBL
  1274 00:0F8D: C5 0B                CMP     TBLSZ
  1275 00:0F8F: B0 21                BCS     G110
  1276 00:0F91: AC 03 08     G105    LDY     symlen          ;put symbol and value in table
  1277 00:0F94: 88                   dey                     ;drop by one
  1278 00:0F95: B9 00 2F     G100    LDA     SYM,Y           ;get char
  1279 00:0F98: 91 0D                STA     (SYMTBL),Y      ;insert
  1280 00:0F9A: 88                   DEY                     ;next char
  1281 00:0F9B: 10 F8                BPL     G100            ;loop if more
  1282 00:0F9D: AC 03 08             LDY     symlen
  1283 00:0FA0: A5 32                LDA     VAL
  1284 00:0FA2: 91 0D                STA     (SYMTBL),Y
  1285 00:0FA4: A5 33                LDA     VAL+1
  1286 00:0FA6: C8                   INY
  1287 00:0FA7: 91 0D                STA     (SYMTBL),Y
  1288 00:0FA9: 70 06                BVS     G104            ;only defining undefined
  1289 00:0FAB: E6 17                INC     NOSYM+1
  1290 00:0FAD: D0 02                BNE     G104
  1291 00:0FAF: E6 16                INC     NOSYM
  1292 00:0FB1: 60           G104    RTS
  1293 00:0FB2: 38           G110    SEC
  1294 00:0FB3: 60                   RTS
  1295                        ;fill LINE until LF or EOF
  1296                        ; expand tab (ctl-i) during fill
  1297                        ; convert all non-embedded alpha to uppercase
  1298 00:0FB4: A9 00        LINEIN  LDA     #0              ;clear
  1299 00:0FB6: 85 26                STA     MAXCL           ;index
  1300 00:0FB8: 85 76                STA     MAXECH          ;and echo index
  1301 00:0FBA: 85 77                STA     STRING          ;and convert flag
  1302 00:0FBC: 20 27 10     GNC     JSR     GNX             ;get next byte
  1303 00:0FBF: A6 76                LDX     MAXECH          ;get echo index
  1304 00:0FC1: 9D 9E 2E             STA     ECHBUF,X        ;save in echo buffer
  1305 00:0FC4: C9 27                CMP     #apost          ;see if apost
  1306 00:0FC6: F0 04                beq     instr           ;is so start string
  1307 00:0FC8: C9 22                cmp     #quote          ;now check for double quote
  1308 00:0FCA: D0 08                bne     nts             ;isn't so not string start or end
  1309 00:0FCC: 48           instr   pha                     ;save char
  Tue Sep 27 2022  1:06                                                                                                    Page 22


  1310 00:0FCD: A5 77                LDA     STRING          ;else get flag
  1311 00:0FCF: 49 FF                EOR     #$FF            ;complement
  1312 00:0FD1: 85 77                STA     STRING          ;and save
  1313 00:0FD3: 68                   pla                     ;get char back
  1314 00:0FD4: 24 77        NTS     BIT     STRING          ;test flag
  1315 00:0FD6: 30 0A                BMI     NLCC            ;branch if set
  1316                        ;not in string so covert lowercase to uppercase
  1317 00:0FD8: C9 61                CMP     #'a'            ;if < a
  1318 00:0FDA: 90 06                BCC     NLCC            ;do nothing
  1319 00:0FDC: C9 7B                CMP     #'z'+1          ;if over z
  1320 00:0FDE: B0 02                BCS     NLCC            ;do nothing
  1321 00:0FE0: 29 5F                AND     #$5F            ;else make upper
  1322 00:0FE2: A6 26        NLCC    LDX     MAXCL           ;get index
  1323 00:0FE4: 9D 4C 2E             STA     LINE,X          ;save char
  1324 00:0FE7: C9 09                CMP     #TAB            ;if not tab
  1325 00:0FE9: D0 16                BNE     NTT             ;branch
  1326 00:0FEB: E6 76                INC     MAXECH          ;bump echo pointer
  1327                        ;expand tab
  1328 00:0FED: A9 20        CTB     LDA     #blank          ;get blank
  1329 00:0FEF: 9D 4C 2E             STA     LINE,X          ;store
  1330 00:0FF2: E6 26                INC     MAXCL           ;bump index
  1331 00:0FF4: A6 26                LDX     MAXCL           ;get index
  1332 00:0FF6: E0 51                CPX     #LINESZ+1       ;if too big
  1333 00:0FF8: B0 19                BCS     ER23            ;is error
  1334 00:0FFA: 8A                   TXA                     ;if index
  1335 00:0FFB: 29 07                AND     #7              ;not mod 8
  1336 00:0FFD: D0 EE                BNE     CTB             ;expand
  1337 00:0FFF: F0 BB                BEQ     GNC             ;else next char
  1338                        ;not a tab
  1339 00:1001: C9 1A        NTT     CMP     #EOF            ;if an eof
  1340 00:1003: F0 20                BEQ     EXT             ;done
  1341 00:1005: C9 0A                CMP     #LF             ;if lf
  1342 00:1007: F0 1C                BEQ     EXT             ;done
  1343 00:1009: E6 76                INC     MAXECH          ;bump echo pointer
  1344 00:100B: E6 26                INC     MAXCL           ;next
  1345 00:100D: A5 26                LDA     MAXCL           ;get index
  1346 00:100F: C9 52                CMP     #LINESZ+2       ;if not too big
  1347 00:1011: 90 A9                BCC     GNC             ;get next
  1348                        ;line too long
  1349 00:1013: A9 0D        ER23    LDA     #CR             ;set
  1350 00:1015: 8D 9C 2E             STA     LINE+LINESZ
  1351 00:1018: 8D EE 2E             STA     ECHBUF+LINESZ   ;buffer end
  1352 00:101B: A9 0A                LDA     #LF             ;end
  1353 00:101D: 8D 9D 2E             STA     LINE+LINESZ+1
  1354 00:1020: 8D EF 2E             STA     ECHBUF+LINESZ+1 ;for both
  1355 00:1023: 38                   SEC                     ;error
  1356 00:1024: 60           RDE     RTS
  1357                        ;normal
  1358 00:1025: 18           EXT     CLC
  1359 00:1026: 60                   RTS
  1360                        ;get next source char
  1361 00:1027: A5 03        GNX     LDA     SRCIND          ;if index
  1362 00:1029: C9 00                CMP     #<SRCBUF+SRCLNG
  1363                        ;        CMP     #SRCBUF+SRCLNG*256/256  ;is less
  1364 00:102B: A5 04                LDA     SRCIND+1        ;than
  1365 00:102D: E9 26                SBC     #>SRCBUF+SRCLNG
  1366                        ;        SBC     #SRCBUF+SRCLNG/256      ;maximum
  1367 00:102F: 90 37                BCC     BUFULL          ;use it
  1368 00:1031: 20 7A 10             JSR     CLSIND          ;else set to start
  1369 00:1034: A9 08                LDA     #SRCLNG/128     ;set number
  1370 00:1036: 85 72                STA     RDSCCN          ;records
  1371 00:1038: A5 03        RDESLP  LDA     SRCIND          ;get buffer
  1372 00:103A: A4 04                LDY     SRCIND+1        ;start
  Tue Sep 27 2022  1:06                                                                                                    Page 23


  1373 00:103C: 20 4C 08             JSR     SETBUF          ;set it
  1374 00:103F: 20 90 08             JSR     SSRFCB          ;point to fcb
  1375 00:1042: 20 64 08             JSR     RDERCR          ;read record
  1376 00:1045: F0 0F                BEQ     RDESOK          ;branch if ok
  1377 00:1047: C9 01                CMP     #1              ;if a one
  1378 00:1049: F0 03                BEQ     *+5             ;is just eof
  1379 00:104B: 4C 86 08             JMP     DOSERR          ;else is error
  1380 00:104E: A0 00                LDY     #0              ;clear index
  1381 00:1050: A9 1A                LDA     #EOF            ;get an eof
  1382 00:1052: 91 03                STA     (SRCIND),Y      ;insert it
  1383 00:1054: D0 0F                BNE     ENDRDE          ;and exit
  1384 00:1056: 18           RDESOK  CLC                     ;add
  1385 00:1057: A5 03                LDA     SRCIND          ;128
  1386 00:1059: 69 80                ADC     #128            ;to
  1387 00:105B: 85 03                STA     SRCIND          ;source
  1388 00:105D: 90 02                BCC     *+4             ;index
  1389 00:105F: E6 04                INC     SRCIND+1        ;then
  1390 00:1061: C6 72                DEC     RDSCCN          ;drop count
  1391 00:1063: D0 D3                BNE     RDESLP          ;loop if more
  1392 00:1065: 20 7A 10     ENDRDE  JSR     CLSIND          ;set index to start
  1393 00:1068: A0 00        BUFULL  LDY     #0              ;clear index
  1394 00:106A: B1 03                LDA     (SRCIND),Y      ;get char
  1395 00:106C: 29 7F                AND     #$7F            ;mask parity
  1396 00:106E: C9 1A                CMP     #EOF            ;if not eof
  1397 00:1070: D0 01                BNE     *+3             ;go bump index
  1398 00:1072: 60                   RTS                     ;else done
  1399 00:1073: E6 03                INC     SRCIND          ;bump low
  1400 00:1075: D0 02                BNE     *+4             ;then as needed
  1401 00:1077: E6 04                INC     SRCIND+1        ;bump high
  1402 00:1079: 60                   RTS
  1403                        ;set source index to start
  1404 00:107A: A9 00        CLSIND  LDA     #<SRCBUF        ;get
  1405 00:107C: A0 22                LDY     #>SRCBUF        ;address
  1406 00:107E: 85 03                STA     SRCIND          ;and
  1407 00:1080: 84 04                STY     SRCIND+1        ;set
  1408 00:1082: 60                   RTS
  1409                        ;search opcode table for valid code
  1410                        ; if found then c=1 else c=0
  1411 00:1083: A9 23        OPFND   LDA     #<OPRNDS        ;get low
  1412 00:1085: 85 0F                STA     OPRTBL          ;save
  1413 00:1087: A9 1F                LDA     #>OPRNDS        ;then
  1414 00:1089: 85 10                STA     OPRTBL+1        ;high
  1415 00:108B: A2 00                LDX     #0              ;clear opcode number
  1416 00:108D: A0 02        G200    LDY     #2              ;offset for compare
  1417 00:108F: B9 00 2F     G210    LDA     SYM,Y           ;get char
  1418 00:1092: D1 0F                CMP     (OPRTBL),Y      ;compare
  1419 00:1094: D0 0E                BNE     G220            ;no match
  1420 00:1096: 88                   DEY                     ;next char
  1421 00:1097: 10 F6                BPL     G210            ;try next
  1422                        ;found valid
  1423 00:1099: BD AC 20             LDA     KTMPL,X         ;get template
  1424 00:109C: 85 36                STA     OPTEM           ;save
  1425 00:109E: BD E4 20             LDA     KCODE,X
  1426 00:10A1: 85 35                STA     OPBAS           ;save
  1427 00:10A3: 60                   RTS
  1428                        ;no match
  1429 00:10A4: A5 0F        G220    LDA     OPRTBL          ;get low addr
  1430 00:10A6: 18                   CLC                     ;point
  1431 00:10A7: 69 03                ADC     #3              ;to
  1432 00:10A9: 85 0F                STA     OPRTBL          ;next
  1433 00:10AB: 90 02                BCC     *+4             ;opcode
  1434 00:10AD: E6 10                INC     OPRTBL+1        ;in
  1435 00:10AF: E8                   INX                     ;bump number
  Tue Sep 27 2022  1:06                                                                                                    Page 24


  1436 00:10B0: E0 39                CPX     #57             ;looked at all?
  1437 00:10B2: 30 D9                BMI     G200            ;no
  1438 00:10B4: 18                   CLC                     ;not found
  1439 00:10B5: 60                   RTS
  1440                        ;make an entry in length table
  1441                        ; x=col with error
  1442                        ; y=length
  1443                        ; a=error code
  1444 00:10B6: 85 45        LTINS   STA     LTBL+4          ;save error
  1445 00:10B8: 84 41                STY     LTBL            ;save length
  1446 00:10BA: 86 42                STX     LTBL+1          ;and col
  1447 00:10BC: A5 1A                LDA     PC
  1448 00:10BE: 85 43                STA     LTBL+2          ;save pc
  1449 00:10C0: A5 1B                LDA     PC+1
  1450 00:10C2: 85 44                STA     LTBL+3
  1451 00:10C4: 98                   TYA                     ;add
  1452 00:10C5: 18                   CLC                     ;length
  1453 00:10C6: 65 1A                ADC     PC              ;to pc
  1454 00:10C8: 85 1A                STA     PC
  1455 00:10CA: 90 02                BCC     *+4
  1456 00:10CC: E6 1B                INC     PC+1
  1457 00:10CE: A5 45                LDA     LTBL+4          ;get error flag
  1458 00:10D0: D0 0C                BNE     LTI             ;branch if error
  1459 00:10D2: A9 04                LDA     #%00000100      ;test print flag
  1460 00:10D4: 25 1C                AND     FLAGS
  1461 00:10D6: F0 03                BEQ     *+5             ;no print
  1462 00:10D8: 4C B2 11             JMP     PRTLN
  1463 00:10DB: 4C 40 12             JMP     PRT170          ;go do kim output
  1464 00:10DE: 85 3C        LTI     STA     EROR
  1465 00:10E0: F8                   SED
  1466 00:10E1: 18                   CLC
  1467 00:10E2: A5 19                LDA     ERCT+1
  1468 00:10E4: 69 01                ADC     #1
  1469 00:10E6: 85 19                STA     ERCT+1
  1470 00:10E8: A5 18                LDA     ERCT
  1471 00:10EA: 69 00                ADC     #0
  1472 00:10EC: 85 18                STA     ERCT
  1473 00:10EE: D8                   CLD
  1474 00:10EF: A5 29                LDA     BYWOR           ;get byte/word flag
  1475 00:10F1: D0 05                BNE     *+7             ;branch if set
  1476 00:10F3: A9 00                LDA     #0              ;else clear
  1477 00:10F5: 8D 00 2E             STA     CODE            ;opcode
  1478 00:10F8: A9 14                LDA     #%00010100      ;check for
  1479 00:10FA: 25 1C                AND     FLAGS           ;error print
  1480 00:10FC: F0 06                BEQ     *+8             ;no
  1481 00:10FE: 20 B2 11             JSR     PRTLN
  1482 00:1101: 4C 0F 13             JMP     ERRHND
  1483 00:1104: 4C 40 12             JMP     PRT170          ;go do kim file
  1484                        ;print the symbol table
  1485                        ;prints one symbol per line
  1486 00:1107: A5 09        NSTAT   LDA     STSAVE          ;point to start
  1487 00:1109: 85 0D                STA     SYMTBL
  1488 00:110B: A5 0A                LDA     STSAVE+1
  1489 00:110D: 85 0E                STA     SYMTBL+1
  1490 00:110F: A9 01                LDA     #1              ;start at beginning
  1491 00:1111: 85 2C                STA     SYMPTR+1
  1492 00:1113: A9 00                LDA     #0
  1493 00:1115: 85 2B                STA     SYMPTR
  1494 00:1117: B8           R20     CLV
  1495 00:1118: A5 2B                LDA     SYMPTR
  1496 00:111A: C5 16                CMP     NOSYM
  1497 00:111C: F0 03                BEQ     R30
  1498 00:111E: 90 09                BCC     R42
  Tue Sep 27 2022  1:06                                                                                                    Page 25


  1499 00:1120: 60           R25     RTS
  1500 00:1121: A5 2C        R30     LDA     SYMPTR+1
  1501 00:1123: C5 17                CMP     NOSYM+1
  1502 00:1125: F0 02                BEQ     R42
  1503 00:1127: B0 F7                BCS     R25
  1504 00:1129: 20 51 13     R42     JSR     OUTCL1
  1505 00:112C: A0 00                LDY     #0              ;symbol and value (* if undef)
  1506 00:112E: B1 0D        R43A    LDA     (SYMTBL),Y
  1507 00:1130: 10 05                BPL     R43B
  1508 00:1132: 29 7F                AND     #$7F
  1509 00:1134: 2C CB 1F             BIT     KLUDG           ;set v
  1510 00:1137: 20 9C 09     R43B    JSR     OUTPUT
  1511 00:113A: C8                   INY
  1512 00:113B: CC 03 08             CPY     symlen          ;compare to length
  1513 00:113E: D0 EE                BNE     R43A
  1514 00:1140: 20 4E 13             JSR     OUTCL2
  1515 00:1143: 50 07                BVC     R43C
  1516 00:1145: A0 04                LDY     #4
  1517 00:1147: 20 7A 11             JSR     PRAST
  1518 00:114A: F0 0B                BEQ     R43D
  1519 00:114C: B1 0D        R43C    LDA     (SYMTBL),Y
  1520 00:114E: 20 B0 09             JSR     NUMA
  1521 00:1151: C8                   INY
  1522 00:1152: B1 0D                LDA     (SYMTBL),Y
  1523 00:1154: 20 B0 09             JSR     NUMA
  1524 00:1157: 20 D4 09     R43D    JSR     CRLF
  1525 00:115A: 18                   CLC
  1526 00:115B: A5 0D                lda     symtbl          ;add length
  1527 00:115D: 6D 03 08             ADC     symlen          ;to table pointer
  1528 00:1160: 85 0D                STA     SYMTBL
  1529 00:1162: 90 02                BCC     r431
  1530 00:1164: E6 0E                INC     SYMTBL+1
  1531 00:1166: 18           r431    clc                     ;add two
  1532 00:1167: A5 0D                lda     symtbl
  1533 00:1169: 69 02                adc     #2
  1534 00:116B: 85 0D                sta     symtbl
  1535 00:116D: 90 02                bcc     r432            ;skip if no carry
  1536 00:116F: E6 0E                inc     symtbl+1
  1537 00:1171: E6 2C        r432    INC     SYMPTR+1
  1538 00:1173: D0 A2                BNE     R20
  1539 00:1175: E6 2B                INC     SYMPTR
  1540 00:1177: 4C 17 11             JMP     R20
  1541                        ;print number * in y
  1542 00:117A: A9 2A        PRAST   LDA     #'*'            ;get *
  1543 00:117C: 20 53 13             JSR     OUTCNT
  1544 00:117F: 88                   DEY
  1545 00:1180: D0 F8                BNE     PRAST
  1546 00:1182: 60                   RTS
  1547                        ;end of assembly code (.END)
  1548 00:1183: A2 00        H10     LDX     #0
  1549 00:1185: 8A                   TXA
  1550 00:1186: A8                   TAY
  1551 00:1187: 20 B6 10             JSR     LTINS
  1552 00:118A: 24 02                BIT     PASNUM          ;test pass number
  1553 00:118C: 10 1F                BPL     H10X            ;skip if first
  1554 00:118E: 20 63 13             JSR     CR2
  1555 00:1191: A9 40                LDA     #$40
  1556 00:1193: 25 1C                AND     FLAGS
  1557 00:1195: F0 0C                BEQ     MNOS
  1558 00:1197: 20 63 13             JSR     CR2
  1559 00:119A: 20 02 0A             JSR     SORT            ;do final sort
  1560 00:119D: 20 07 11             JSR     NSTAT
  1561 00:11A0: 20 D4 09             JSR     CRLF            ;and a last cr and lf
  Tue Sep 27 2022  1:06                                                                                                    Page 26


  1562 00:11A3: A9 F5        MNOS    LDA     #<ENDMSG        ;point to
  1563 00:11A5: A0 1A                LDY     #>ENDMSG        ;end message
  1564 00:11A7: 20 50 08             JSR     WRCNMS          ;print it
  1565 00:11AA: 20 DE 09             JSR     CCRLF
  1566 00:11AD: A2 FB        H10X    LDX     #$FB
  1567 00:11AF: 9A                   TXS
  1568 00:11B0: 38                   SEC
  1569 00:11B1: 60                   RTS
  1570                        ;print output line
  1571 00:11B2: A9 00        PRTLN   LDA     #<CODE
  1572 00:11B4: 85 6A                STA     CDEPTR
  1573 00:11B6: A9 2E                LDA     #>CODE
  1574 00:11B8: 85 6B                STA     CDEPTR+1
  1575 00:11BA: A5 43                LDA     LTBL+2
  1576 00:11BC: 85 1A                STA     PC
  1577 00:11BE: A5 44                LDA     LTBL+3
  1578 00:11C0: 85 1B                STA     PC+1
  1579 00:11C2: A5 41                LDA     LTBL
  1580 00:11C4: 48           PRT10   PHA
  1581 00:11C5: A9 00                LDA     #0
  1582 00:11C7: 85 13                STA     COLCNT
  1583 00:11C9: 20 51 13             JSR     OUTCL1
  1584 00:11CC: A5 1B                LDA     PC+1
  1585 00:11CE: 20 41 13             JSR     NUMC2
  1586 00:11D1: A5 1A                LDA     PC
  1587 00:11D3: 20 41 13             JSR     NUMC2
  1588 00:11D6: 20 51 13             JSR     OUTCL1          ;send a blank
  1589 00:11D9: 68                   PLA
  1590 00:11DA: D0 0E                BNE     PRT20           ;ok if not zero
  1591 00:11DC: 48                   PHA                     ;save zero again
  1592 00:11DD: A5 2A                LDA     LCDPT           ;get mult lines flag
  1593 00:11DF: D0 42                BNE     PRT140          ;branch if set
  1594 00:11E1: 20 58 13             JSR     OUTTB           ;send tab
  1595 00:11E4: 20 58 13             JSR     OUTTB           ;and another
  1596 00:11E7: 4C 20 12             JMP     PRT130          ;go echo line
  1597                        ;was something to print
  1598 00:11EA: AA           PRT20   TAX
  1599 00:11EB: C9 04                CMP     #4
  1600 00:11ED: 90 08                BCC     PRT40
  1601 00:11EF: A2 03                LDX     #3
  1602 00:11F1: 38                   SEC
  1603 00:11F2: E9 03                SBC     #3
  1604 00:11F4: 4C F9 11             JMP     PRT50
  1605 00:11F7: A9 00        PRT40   LDA     #0
  1606 00:11F9: 48           PRT50   PHA
  1607 00:11FA: CA           PRT60   DEX
  1608 00:11FB: 30 18                BMI     PRT100
  1609 00:11FD: A0 00                LDY     #0
  1610 00:11FF: B1 6A                LDA     (CDEPTR),Y
  1611 00:1201: 20 41 13     PRT70   JSR     NUMC2
  1612 00:1204: 20 51 13     PRT80   JSR     OUTCL1
  1613 00:1207: E6 1A                INC     PC
  1614 00:1209: D0 02                BNE     *+4
  1615 00:120B: E6 1B                INC     PC+1
  1616 00:120D: E6 6A                INC     CDEPTR
  1617 00:120F: D0 E9                BNE     PRT60
  1618 00:1211: E6 6B                INC     CDEPTR+1
  1619 00:1213: D0 E5                BNE     PRT60
  1620 00:1215: A5 2A        PRT100  LDA     LCDPT
  1621 00:1217: D0 0A                BNE     PRT140
  1622 00:1219: A6 26                LDX     MAXCL
  1623 00:121B: 30 06                BMI     PRT140
  1624 00:121D: 20 58 13             JSR     OUTTB           ;send a tab
  Tue Sep 27 2022  1:06                                                                                                    Page 27


  1625 00:1220: 20 FC 12     PRT130  JSR     ECHOPR          ;now do line
  1626 00:1223: 20 D4 09     PRT140  JSR     CRLF
  1627 00:1226: E6 2A                INC     LCDPT
  1628 00:1228: 68                   PLA
  1629 00:1229: F0 15                BEQ     PRT170
  1630 00:122B: AA                   TAX
  1631 00:122C: A9 80                LDA     #128
  1632 00:122E: 25 1C                AND     FLAGS
  1633 00:1230: D0 04                BNE     PRT160
  1634 00:1232: 8A                   TXA
  1635 00:1233: 4C C4 11             JMP     PRT10
  1636 00:1236: 18           PRT160  CLC
  1637 00:1237: 8A                   TXA
  1638 00:1238: 65 1A                ADC     PC
  1639 00:123A: 85 1A                STA     PC
  1640 00:123C: 90 02                BCC     PRT170
  1641 00:123E: E6 1B                INC     PC+1
  1642 00:1240: 24 02        PRT170  BIT     PASNUM
  1643 00:1242: 10 10                bpl     extkim          ;exit if first pass
  1644 00:1244: A5 41                LDA     LTBL
  1645 00:1246: F0 0C                beq     extkim          ;or if no output
  1646 00:1248: 85 71                STA     KIMCNT
  1647 00:124A: A5 1C                LDA     FLAGS           ;get flag
  1648 00:124C: 29 20                AND     #%00100000      ;isolate kim bit
  1649 00:124E: F0 04                beq     extkim          ;exit if kim disabled
  1650 00:1250: 24 7A                bit     nkmflg          ;see if command line Z
  1651 00:1252: 10 01                bpl     *+3             ;it wasn't so continue
  1652 00:1254: 60           extkim  RTS                     ;else done
  1653                        ;following code actually does kim output
  1654 00:1255: A5 4B                LDA     BYTCNT
  1655 00:1257: D0 0C                BNE     NONEW
  1656 00:1259: A5 43        NWKIM   LDA     LTBL+2          ;initialize program counter
  1657 00:125B: 85 4D                STA     FRSTPC+1
  1658 00:125D: 85 69                STA     CURNPC+1
  1659 00:125F: A5 44                LDA     LTBL+3
  1660 00:1261: 85 4C                STA     FRSTPC
  1661 00:1263: 85 68                STA     CURNPC
  1662 00:1265: A5 43        NONEW   LDA     LTBL+2
  1663 00:1267: C5 69                CMP     CURNPC+1
  1664 00:1269: F0 06                BEQ     *+8
  1665 00:126B: 20 A9 12     W0      JSR     WRKMRC
  1666 00:126E: 4C 59 12             JMP     NWKIM
  1667 00:1271: A5 44                LDA     LTBL+3
  1668 00:1273: C5 68                CMP     CURNPC
  1669 00:1275: D0 F4                BNE     W0
  1670 00:1277: A0 00                LDY     #0
  1671 00:1279: A6 4B        W1      LDX     BYTCNT
  1672 00:127B: B9 00 2E     KFL     LDA     CODE,Y
  1673 00:127E: 95 4E                STA     KIMREC,X
  1674 00:1280: E6 69                INC     CURNPC+1
  1675 00:1282: D0 02                BNE     *+4
  1676 00:1284: E6 68                INC     CURNPC
  1677 00:1286: C8                   INY
  1678 00:1287: E8                   INX
  1679 00:1288: 86 4B                STX     BYTCNT
  1680 00:128A: C6 71                DEC     KIMCNT
  1681 00:128C: D0 05                BNE     *+7
  1682 00:128E: E0 18                CPX     #BYTSRC
  1683 00:1290: F0 17                BEQ     WRKMRC
  1684 00:1292: 60                   RTS
  1685 00:1293: E0 18                CPX     #BYTSRC
  1686 00:1295: D0 E4                BNE     KFL
  1687 00:1297: 98                   TYA
  Tue Sep 27 2022  1:06                                                                                                    Page 28


  1688 00:1298: 48                   PHA
  1689 00:1299: 20 A9 12             JSR     WRKMRC
  1690 00:129C: 68                   PLA
  1691 00:129D: A8                   TAY
  1692 00:129E: A5 69                LDA     CURNPC+1
  1693 00:12A0: 85 4D                STA     FRSTPC+1
  1694 00:12A2: A5 68                LDA     CURNPC
  1695 00:12A4: 85 4C                STA     FRSTPC
  1696 00:12A6: 4C 79 12             JMP     W1
  1697                        ;write kim record
  1698 00:12A9: A9 00        wrkmrc  lda     #0              ;clear checksum
  1699 00:12AB: 85 67                sta     chksum+1
  1700 00:12AD: 85 66                sta     chksum
  1701 00:12AF: A5 4B                LDA     BYTCNT          ;get byte count
  1702 00:12B1: D0 01                BNE     *+3
  1703 00:12B3: 60                   RTS                     ;done if zero
  1704                        ;start output with semicolon
  1705 00:12B4: A9 3B                LDA     #semico
  1706 00:12B6: 20 80 09             JSR     KIMOUT
  1707 00:12B9: A5 4B                LDA     BYTCNT
  1708 00:12BB: 20 F0 12             jsr     addck           ;add count to checksum
  1709 00:12BE: 20 74 09             JSR     KIMBYT
  1710 00:12C1: A5 4B                LDA     BYTCNT          ;adjust to get address
  1711 00:12C3: 18                   CLC
  1712 00:12C4: 69 02                ADC     #2
  1713 00:12C6: 85 4B                STA     BYTCNT
  1714 00:12C8: A9 01                LDA     #1
  1715 00:12CA: 85 70                STA     KINDEX
  1716 00:12CC: A6 70        WRK1    LDX     KINDEX
  1717 00:12CE: B5 4B                LDA     BYTCNT,X
  1718 00:12D0: 20 F0 12             jsr     addck           ;add to checksum
  1719 00:12D3: 20 74 09             JSR     KIMBYT
  1720 00:12D6: E6 70                INC     KINDEX
  1721 00:12D8: C6 4B                DEC     BYTCNT
  1722 00:12DA: D0 F0                BNE     WRK1
  1723 00:12DC: A5 66                LDA     CHKSUM          ;send high
  1724 00:12DE: 20 74 09             JSR     KIMBYT          ;checksum
  1725 00:12E1: A5 67                LDA     CHKSUM+1        ;then
  1726 00:12E3: 20 74 09             JSR     KIMBYT          ;low part
  1727 00:12E6: A9 0D                LDA     #CR
  1728 00:12E8: 20 80 09             JSR     KIMOUT
  1729 00:12EB: A9 0A                LDA     #LF
  1730 00:12ED: 4C 80 09             JMP     KIMOUT
  1731                        ;add byte in a to checksum and save a
  1732 00:12F0: 48           addck   pha                     ;save byte
  1733 00:12F1: 18                   clc                     ;now do add
  1734 00:12F2: 65 67                adc     chksum+1
  1735 00:12F4: 85 67                sta     chksum+1
  1736 00:12F6: 90 02                bcc     addckx          ;done if no carry
  1737 00:12F8: E6 66                inc     chksum          ;else bump high
  1738 00:12FA: 68           addckx  pla                     ;get input byte
  1739 00:12FB: 60                   rts
  1740                        ;print line as in buffer
  1741 00:12FC: A2 FF        ECHOPR  LDX     #$FF
  1742 00:12FE: C6 76                DEC     MAXECH          ;drop limit
  1743 00:1300: E8           ECH10   INX                     ;bump index
  1744 00:1301: E4 76                CPX     MAXECH          ;compare to max
  1745 00:1303: B0 09                BCS     ECH20
  1746 00:1305: BD 9E 2E             LDA     ECHBUF,X        ;get char
  1747 00:1308: 20 9C 09             JSR     OUTPUT          ;send
  1748 00:130B: 4C 00 13             JMP     ECH10           ;and loop
  1749 00:130E: 60           ECH20   RTS
  1750                        ;print error message and pointer
  Tue Sep 27 2022  1:06                                                                                                    Page 29


  1751 00:130F: 24 02        ERRHND  BIT     PASNUM          ;test pass number
  1752 00:1311: 30 01                BMI     erh01           ;continue if second
  1753 00:1313: 60                   RTS                     ;else done
  1754 00:1314: A9 85        erh01   LDA     #<ERRMSG        ;point to
  1755 00:1316: A0 1B                LDY     #>ERRMSG        ;error message
  1756 00:1318: 20 73 08             JSR     WRLSMS          ;write it
  1757 00:131B: 20 58 13             JSR     OUTTB           ;send a tab
  1758 00:131E: A6 42                LDX     LTBL+1          ;get error column
  1759 00:1320: CA           ERH10   DEX
  1760 00:1321: 30 06                BMI     ERH20
  1761 00:1323: 20 51 13             JSR     OUTCL1
  1762 00:1326: 4C 20 13             JMP     ERH10
  1763 00:1329: A9 5E        ERH20   LDA     #'^'
  1764 00:132B: 20 9C 09             JSR     OUTPUT
  1765 00:132E: 20 D4 09             JSR     CRLF
  1766 00:1331: A5 3C                LDA     EROR            ;get error number
  1767 00:1333: 0A                   ASL     A               ;mult by two
  1768 00:1334: AA                   TAX                     ;make into index
  1769 00:1335: BD B6 1B             LDA     ERRVEC,X        ;get low
  1770 00:1338: BC B7 1B             LDY     ERRVEC+1,X      ;and high address
  1771 00:133B: 20 73 08             JSR     WRLSMS          ;write message
  1772 00:133E: 4C D4 09             JMP     CRLF            ;and cr lf
  1773                        ;print byte and adjust column count
  1774 00:1341: E6 13        NUMC2   INC     COLCNT
  1775 00:1343: E6 13                INC     COLCNT
  1776 00:1345: 4C B0 09             JMP     NUMA
  1777                        ;output blanks and adjust count
  1778 00:1348: 20 51 13     OUTCL4  JSR     OUTCL1
  1779 00:134B: 20 51 13             JSR     OUTCL1
  1780 00:134E: 20 51 13     OUTCL2  JSR     OUTCL1
  1781 00:1351: A9 20        OUTCL1  LDA     #blank
  1782 00:1353: E6 13        OUTCNT  INC     COLCNT
  1783 00:1355: 4C 9C 09             JMP     OUTPUT
  1784                        ;send a tab
  1785 00:1358: A9 09        OUTTB   LDA     #TAB            ;get it
  1786 00:135A: 4C 9C 09             JMP     OUTPUT          ;and send
  1787                        ;cr lf routines
  1788 00:135D: 20 D4 09     CR4     JSR     CRLF
  1789 00:1360: 20 D4 09             JSR     CRLF
  1790 00:1363: 20 D4 09     CR2     JSR     CRLF
  1791 00:1366: 4C D4 09             JMP     CRLF
  1792                        ;-------------------------------
  1793                        ;process a single line
  1794                        ;-------------------------------
  1795 00:1369: A9 00        PROCES  LDA     #0
  1796 00:136B: A2 0D                LDX     #13
  1797 00:136D: 95 1D                STA     FLAGS+1,X
  1798 00:136F: CA                   DEX
  1799 00:1370: 10 FB                BPL     *-3
  1800 00:1372: A2 4B                LDX     #LINESZ-5       ;clear
  1801 00:1374: 9D 00 2E             STA     CODE,X          ;all of
  1802 00:1377: CA                   DEX                     ;code
  1803 00:1378: 10 FA                BPL     *-4             ;buffer
  1804 00:137A: 20 B4 0F             JSR     LINEIN          ;get the input line
  1805 00:137D: CA                   DEX
  1806 00:137E: CA                   DEX
  1807 00:137F: 86 26                STX     MAXCL
  1808 00:1381: C9 1A                CMP     #EOF
  1809 00:1383: D0 15                BNE     NTEOF           ;continue if not eof
  1810 00:1385: A9 0D                LDA     #CR             ;stuff cr and lf
  1811 00:1387: 8D 9E 2E             STA     ECHBUF
  1812 00:138A: A9 0A                LDA     #LF
  1813 00:138C: 8D 9F 2E             STA     ECHBUF+1
  Tue Sep 27 2022  1:06                                                                                                    Page 30


  1814 00:138F: A2 FF                LDX     #255            ;set column to -1
  1815 00:1391: 85 26                STA     MAXCL
  1816 00:1393: A2 01                LDX     #1
  1817 00:1395: 86 76                STX     MAXECH          ;set max echo col to 1
  1818 00:1397: 4C 83 11             JMP     H10
  1819                        ;not eof so process line
  1820 00:139A: F8           NTEOF   SED                     ;set decimal mode
  1821 00:139B: A5 15                LDA     LINENO+1        ;bump line number by 1
  1822 00:139D: 69 01                ADC     #1
  1823 00:139F: 85 15                STA     LINENO+1
  1824 00:13A1: A5 14                LDA     LINENO
  1825 00:13A3: 69 00                ADC     #0
  1826 00:13A5: 85 14                STA     LINENO
  1827 00:13A7: D8                   CLD                     ;back to binary mode
  1828 00:13A8: 20 C7 0A             JSR     FNDNB           ;get first non-blank
  1829 00:13AB: B0 08                BCS     H88
  1830                        ;blank line so ignore
  1831 00:13AD: A0 00        HL0000  LDY     #0
  1832 00:13AF: A2 00        HLY000  LDX     #0
  1833 00:13B1: 8A                   TXA
  1834 00:13B2: 4C 2E 19             JMP     LTS1
  1835                        ;there is something in the line other than blanks
  1836 00:13B5: 20 6C 0B     H88     JSR     NUMRC           ;see if first char a number
  1837 00:13B8: 90 0B                BCC     H88B            ;jump if not
  1838 00:13BA: 20 87 0A             JSR     INCRP           ;number so go to next char
  1839 00:13BD: 86 25                STX     PARST           ;prepare to use
  1840 00:13BF: 86 1E                STX     COLP
  1841 00:13C1: B0 EA                BCS     HL0000          ;hit eol so ignore line
  1842 00:13C3: 90 F0                BCC     H88             ;not eol so loop until past number
  1843                        ;at this point line number has been ignored & we are ready to continue parsing
  1844                        ;this is also main loop entry after successive fields are evaluated
  1845 00:13C5: 20 C7 0A     H88B    JSR     FNDNB           ;find non-blank
  1846 00:13C8: 90 E3                BCC     HL0000          ;none so ignore blank line
  1847 00:13CA: BD 4C 2E     H88A    LDA     LINE,X          ;get the character
  1848 00:13CD: C9 3B                CMP     #semico         ;if start of comment then also ignore
  1849 00:13CF: F0 DC                BEQ     HL0000
  1850 00:13D1: 20 E5 0A             JSR     FNDEN           ;find end of character sequence
  1851 00:13D4: B0 09                BCS     H1              ;jump if found
  1852 00:13D6: A9 03        HL303B  LDA     #3              ;else ERR03 - illegal or missing opcode
  1853 00:13D8: A0 03        HL3AAB  LDY     #3
  1854 00:13DA: A6 1F        HLYAAB  LDX     CSB
  1855 00:13DC: 4C 2E 19             JMP     LTS1
  1856                        ;have found a character string - start testing it
  1857 00:13DF: A6 1F        H1      LDX     CSB             ;go back to string start
  1858 00:13E1: BD 4C 2E             LDA     LINE,X          ;get char
  1859 00:13E4: C9 2E                CMP     #'.'            ;see if start of directive
  1860 00:13E6: D0 03                BNE     *+5             ;if not then jump
  1861 00:13E8: 4C 47 15             JMP     H5              ;if is go to directive processing section
  1862 00:13EB: C9 2A                CMP     #'*'            ;see if PC processing
  1863 00:13ED: D0 03                BNE     *+5             ;if not then jump
  1864 00:13EF: 4C 9E 14             JMP     H102            ;if is process PC change
  1865                        ;at this point we either have a label or an opcode but need to check length
  1866 00:13F2: A4 21                LDY     CSL             ;get char string length
  1867 00:13F4: CC 03 08             CPY     symlen          ;compare to max
  1868 00:13F7: 90 09                BCC     H76             ;ok is less
  1869 00:13F9: F0 07                beq     h76             ;ok if same
  1870                        ;ERR09 - label too long
  1871 00:13FB: A9 09                LDA     #9
  1872 00:13FD: A0 03        HL3AAX  LDY     #3
  1873 00:13FF: 4C 2E 19             JMP     LTS1
  1874                        ;there is a string that may be label or opcode
  1875 00:1402: 84 2D        H76     STY     LEN             ;set length
  1876 00:1404: 20 7B 0B             JSR     CONSYM          ;try to construct symbol
  Tue Sep 27 2022  1:06                                                                                                    Page 31


  1877 00:1407: B0 04                BCS     h76ok           ;jump if all alpha-numeric
  1878 00:1409: A9 0A                LDA     #10             ;else ERR10 - non-alphanumeric
  1879 00:140B: D0 F0                BNE     HL3AAX
  1880 00:140D: A5 21        h76ok   LDA     CSL             ;see if symbol is right length
  1881 00:140F: C9 03                CMP     #3              ;for opcode
  1882 00:1411: D0 08                BNE     cslnt3          ;jump if not
  1883 00:1413: 20 83 10             JSR     OPFND           ;see if opcode
  1884 00:1416: 90 03                BCC     cslnt3          ;not so process as label
  1885 00:1418: 4C ED 16             JMP     H201            ;is so process opcode
  1886                        ;at this point we have a string that looks like a label
  1887 00:141B: A5 27        cslnt3  LDA     LABL            ;first see if already a label
  1888 00:141D: D0 B7                BNE     HL303B          ;ERR03 if is - illegal opcode
  1889 00:141F: E6 27                INC     LABL            ;but now say there is a label
  1890 00:1421: A6 1E                LDX     COLP            ;point to start
  1891 00:1423: 20 5D 0B             JSR     ALPH            ;see if alpha
  1892 00:1426: B0 04                BCS     H94             ;ok if is
  1893 00:1428: A9 08                LDA     #8              ;else ERR08 - label does not start with alpha
  1894 00:142A: D0 D1                BNE     HL3AAX
  1895                        ;label starts with alpha
  1896 00:142C: AD 01 2F     H94     LDA     SYM+1           ;see if single character long
  1897 00:142F: C9 20                CMP     #blank          ;jump more than one char
  1898 00:1431: D0 1C                BNE     H93
  1899 00:1433: AD 00 2F             LDA     SYM
  1900 00:1436: C9 41                CMP     #'A'            ;test for illegal label
  1901 00:1438: F0 10                BEQ     H97             ;A is illegal
  1902 00:143A: C9 58                CMP     #'X'
  1903 00:143C: F0 0C                BEQ     H97             ;X is illegal
  1904 00:143E: C9 59                CMP     #'Y'
  1905 00:1440: F0 08                BEQ     H97             ;Y is illegal
  1906 00:1442: C9 53                CMP     #'S'
  1907 00:1444: F0 04                BEQ     H97             ;S is illegal
  1908 00:1446: C9 50                CMP     #'P'
  1909 00:1448: D0 05                BNE     H93             ;not P so legal
  1910                        ;ERR20 - label is a reserved single character
  1911 00:144A: A9 14        H97     LDA     #20
  1912 00:144C: 4C FD 13             JMP     HL3AAX
  1913                        ;label is not reserved and is not opcode
  1914 00:144F: 86 22        H93     STX     LSST
  1915 00:1451: A2 00                LDX     #0
  1916                        ;push symbol and then symbol length onto stack
  1917 00:1453: BD 00 2F     H8845   LDA     SYM,X           ;get char
  1918 00:1456: 48                   PHA                     ;push onto stack
  1919 00:1457: E8                   INX                     ;bump pointer
  1920 00:1458: EC 03 08             CPX     symlen          ;compare to max
  1921 00:145B: D0 F6                BNE     H8845           ;loop if more
  1922 00:145D: A5 21                LDA     CSL             ;now get length
  1923 00:145F: 48                   PHA                     ;and push it
  1924 00:1460: A6 20                LDX     CSE             ;point to end of string
  1925 00:1462: E8                   INX                     ;and go one past
  1926 00:1463: 86 1E                STX     COLP            ;save as pointer
  1927 00:1465: 20 C7 0A             JSR     FNDNB           ;look for non blank
  1928 00:1468: 90 07                BCC     H120            ;none found
  1929 00:146A: BD 4C 2E             LDA     LINE,X
  1930 00:146D: C9 3D                CMP     #'='
  1931 00:146F: F0 47                BEQ     H121
  1932 00:1471: 20 0E 0F     H120    JSR     FIND            ;see if exiting label
  1933 00:1474: 90 11                BCC     H95             ;either not found or not not defined
  1934                        ;label is existing label and is defined so make sure it is not being changed
  1935 00:1476: A5 32                LDA     VAL             ;first test high
  1936 00:1478: C5 1B                CMP     PC+1
  1937 00:147A: D0 06                BNE     MRO2            ;error if different
  1938 00:147C: A5 33                LDA     VAL+1           ;now test low
  1939 00:147E: C5 1A                CMP     PC
  Tue Sep 27 2022  1:06                                                                                                    Page 32


  1940 00:1480: F0 10                BEQ     H95A            ;ok if same
  1941                        ;ERR02 - label previously defined
  1942 00:1482: A0 03        MRO2    LDY     #3
  1943 00:1484: 4C 32 15             JMP     HLY02L
  1944                        ;at this point we have a valid label so create or update entry
  1945                        ;v flag must not have been altered since jsr find was executed at h120
  1946                        ;as that flag determines if insert creates new entry or just updates
  1947                        ;value of existing entry
  1948 00:1487: A5 1B        H95     LDA     PC+1            ;set val to current pc
  1949 00:1489: 85 32                STA     VAL
  1950 00:148B: A5 1A                LDA     PC
  1951 00:148D: 85 33                STA     VAL+1
  1952 00:148F: 20 83 0F             JSR     INSERT          ;do insert or update
  1953 00:1492: A6 1F        H95A    LDX     CSB             ;test start of string
  1954 00:1494: E4 22                CPX     LSST            ;against label start
  1955 00:1496: F0 03                BEQ     *+5             ;if same then done with line
  1956 00:1498: 4C CA 13             JMP     H88A            ;else loop to find next field
  1957 00:149B: 4C AD 13             JMP     HL0000
  1958                        ;process PC reference statement
  1959 00:149E: E6 28        H102    INC     ORG             ;set flag to say an org is in line
  1960 00:14A0: E6 1E                INC     COLP
  1961 00:14A2: 86 22                STX     LSST
  1962 00:14A4: 20 C7 0A             JSR     FNDNB           ;find next non blank
  1963 00:14A7: B0 03                BCS     H103            ;got one so continue
  1964 00:14A9: 4C 21 17             JMP     HL307B          ;else ERR07 - ran off line
  1965 00:14AC: BD 4C 2E     H103    LDA     LINE,X          ;get that next char
  1966 00:14AF: C9 3D                CMP     #'='            ;see if =
  1967 00:14B1: F0 05                BEQ     H121            ;is so ok
  1968 00:14B3: A9 16                LDA     #22             ;if not is ERR22 - expecting = for org
  1969 00:14B5: 4C FD 13             JMP     HL3AAX
  1970                        ;entry point for normal * = processing as well as <label> = processing
  1971 00:14B8: E6 28        H121    INC     ORG             ;make sure flag set
  1972 00:14BA: 20 87 0A             JSR     INCRP           ;bump pointer
  1973 00:14BD: 86 1E                STX     COLP            ;and save
  1974 00:14BF: 90 03                BCC     *+5             ;ok if not eol
  1975 00:14C1: 4C 21 17             JMP     HL307B          ;else ERR07 - ran off line
  1976 00:14C4: 20 C7 0A             JSR     FNDNB           ;find a non-blank
  1977 00:14C7: B0 05                BCS     H104            ;got one
  1978 00:14C9: A0 00                LDY     #0              ;else ERR
  1979 00:14CB: 4C 13 17             JMP     HLY07E
  1980 00:14CE: 20 9E 0B     H104    JSR     EVAL
  1981 00:14D1: A5 34                LDA     RETURN
  1982 00:14D3: 30 0C                BMI     H105
  1983 00:14D5: D0 05                BNE     H8806
  1984 00:14D7: A9 0B                LDA     #11             ;else ERR11 - forward reference in equate or org
  1985 00:14D9: 4C 80 17             JMP     HL3AAJ
  1986 00:14DC: A9 0D        H8806   LDA     #13             ;ERR13 - invalid expression
  1987 00:14DE: 4C 80 17             JMP     HL3AAJ
  1988 00:14E1: A5 28        H105    LDA     ORG
  1989 00:14E3: C9 01                CMP     #1
  1990 00:14E5: F0 2A                BEQ     H9
  1991 00:14E7: A9 01                LDA     #1
  1992 00:14E9: 25 1D                AND     FLAGS+1
  1993 00:14EB: F0 12                BEQ     H150
  1994 00:14ED: A6 1F                LDX     CSB
  1995 00:14EF: A9 15                LDA     #21
  1996 00:14F1: A0 00                LDY     #0
  1997 00:14F3: 20 B6 10             JSR     LTINS
  1998 00:14F6: A2 00                LDX     #0
  1999 00:14F8: 86 1A                STX     PC
  2000 00:14FA: 86 1B                STX     PC+1
  2001 00:14FC: 4C 31 19             JMP     NXT
  2002 00:14FF: A2 00        H150    LDX     #0
  Tue Sep 27 2022  1:06                                                                                                    Page 33


  2003 00:1501: 8A                   TXA
  2004 00:1502: A8                   TAY
  2005 00:1503: 20 B6 10             JSR     LTINS
  2006 00:1506: A5 23                LDA     EXP
  2007 00:1508: 85 1B                STA     PC+1
  2008 00:150A: A5 24                LDA     EXP+1
  2009 00:150C: 85 1A                STA     PC
  2010 00:150E: 4C 31 19             JMP     NXT
  2011 00:1511: 68           H9      PLA
  2012 00:1512: 85 21                STA     CSL
  2013 00:1514: AE 03 08             LDX     symlen          ;get length
  2014 00:1517: CA                   dex                     ;and drop
  2015 00:1518: 68           H8846   PLA
  2016 00:1519: 9D 00 2F             STA     SYM,X
  2017 00:151C: CA                   DEX
  2018 00:151D: 10 F9                BPL     H8846
  2019 00:151F: 20 0E 0F             JSR     FIND
  2020 00:1522: 90 15                BCC     H106
  2021 00:1524: A5 32                LDA     VAL
  2022 00:1526: C5 23                CMP     EXP
  2023 00:1528: D0 06                BNE     MR01
  2024 00:152A: A5 33                LDA     VAL+1
  2025 00:152C: C5 24                CMP     EXP+1
  2026 00:152E: F0 14                BEQ     H106A
  2027 00:1530: A0 00        MR01    LDY     #0
  2028 00:1532: A9 02        HLY02L  LDA     #2
  2029 00:1534: A6 22                LDX     LSST
  2030 00:1536: 4C 2E 19             JMP     LTS1
  2031 00:1539: A5 23        H106    LDA     EXP
  2032 00:153B: 85 32                STA     VAL
  2033 00:153D: A5 24                LDA     EXP+1
  2034 00:153F: 85 33                STA     VAL+1
  2035 00:1541: 20 83 0F             JSR     INSERT
  2036 00:1544: 4C AD 13     H106A   JMP     HL0000
  2037                        ;assembler directive processing
  2038                        ;search directive table and process if found
  2039 00:1547: A6 1F        H5      LDX     CSB             ;get string start
  2040 00:1549: E8                   INX                     ;go past "."
  2041 00:154A: A9 F6                LDA     #<ASMDIR        ;initialize pointer to table start
  2042 00:154C: 85 11                STA     TBLPTR
  2043 00:154E: A9 1E                LDA     #>ASMDIR
  2044 00:1550: 85 12                STA     TBLPTR+1
  2045 00:1552: A9 03                LDA     #3              ;set length to 3
  2046 00:1554: 85 2D                STA     LEN
  2047 00:1556: 20 7B 0B             JSR     CONSYM          ;build a symbol
  2048 00:1559: CA                   DEX                     ;drop index so pointing to third char
  2049                        ;loop entry for search
  2050 00:155A: 20 87 0A     H8847   JSR     INCRP           ;go to next char
  2051 00:155D: B0 07                BCS     H8849           ;jump if eol
  2052 00:155F: BD 4C 2E             LDA     LINE,X          ;else get char
  2053 00:1562: C9 20                CMP     #blank          ;test against blank
  2054 00:1564: D0 F4                BNE     H8847           ;loop if not to handle full length directives
  2055 00:1566: 86 1E        H8849   STX     COLP            ;save pointer
  2056 00:1568: B0 07                BCS     H8835           ;jump if valid directive
  2057 00:156A: A0 00        HL014B  LDY     #0              ;else say ERR14 - invalid directive
  2058 00:156C: A9 0E                LDA     #14
  2059 00:156E: 4C DA 13             JMP     HLYAAB
  2060                        ;start testing symbol against valid directive table entries
  2061 00:1571: A2 0E        H8835   LDX     #NUMASM-1       ;set x to last entry
  2062 00:1573: A0 02        H9938   LDY     #2              ;y is char index starting at end
  2063 00:1575: B9 00 2F     H9939   LDA     SYM,Y           ;get symbol char
  2064 00:1578: D1 11                CMP     (TBLPTR),Y      ;compare to table entry char
  2065 00:157A: D0 15                BNE     H9940           ;jump if no match
  Tue Sep 27 2022  1:06                                                                                                    Page 34


  2066 00:157C: 88                   DEY                     ;match so far so drop index
  2067 00:157D: 10 F6                BPL     H9939           ;loop if more to test
  2068 00:157F: 8A                   TXA                     ;full match so set x to 2x
  2069 00:1580: 0A                   ASL     A
  2070 00:1581: AA                   TAX
  2071 00:1582: BD D8 1E             LDA     ASMJMP,X        ;get entry address and
  2072 00:1585: 85 11                STA     TBLPTR          ;set pointer
  2073 00:1587: BD D9 1E             LDA     ASMJMP+1,X
  2074 00:158A: 85 12                STA     TBLPTR+1
  2075                        ;following line may be redundant - need to double check
  2076 00:158C: A5 1C                LDA     FLAGS           ;get flags for directive use
  2077                        ;
  2078                        ; - another Bug in WDC Tools!
  2079                        ; Will not allow an indirect JUMP to an address in Page Zero!
  2080                        ; - shows as illegal addressing.... oops.
  2081                        ; - need to hardcode an opcode and operand to do the indirect:
  2082                        ; - JUMP (address). Actual instruction commented out below.
  2083                        ;
  2084 00:158E: 6C                   .DB     $6C
  2085 00:158F: 11 00                .DW     TBLPTR
  2086                        ;        JMP     (TBLPTR)        ;go to entry point
  2087                        ;
  2088                        ;there was not a match so try next table entry
  2089 00:1591: A5 11        H9940   LDA     TBLPTR
  2090 00:1593: 18                   CLC
  2091 00:1594: 69 03                ADC     #3
  2092 00:1596: 85 11                STA     TBLPTR
  2093 00:1598: 90 02                BCC     *+4
  2094 00:159A: E6 12                INC     TBLPTR+1
  2095 00:159C: CA                   DEX                     ;drop counter
  2096 00:159D: 10 D4                BPL     H9938           ;loop if more
  2097 00:159F: 30 C9                BMI     HL014B          ;else error
  2098                        ;execute .PAG directive
  2099 00:15A1: A5 1C        PAGE    LDA     FLAGS           ;get flags
  2100 00:15A3: 29 04                AND     #%00000100      ;test list
  2101 00:15A5: F0 0C                BEQ     NOPAGE          ;branch if no list
  2102 00:15A7: AD 02 01             lda     $100+2          ;get sim page
  2103 00:15AA: 8D AF 15             sta     getff+2
  2104 00:15AD: AD 3E FF     getff   lda     $FF00+62        ;get formfeed code
  2105 00:15B0: 20 9C 09             JSR     OUTPUT          ;send it
  2106 00:15B3: 4C AD 13     NOPAGE  JMP     HL0000          ;and continue
  2107                        ;process .byt directive
  2108 00:15B6: A0 01        H111    LDY     #1              ;value for .byt for flag
  2109 00:15B8: D0 02                BNE     H13A            ;jump always
  2110                        ;process .wor directive
  2111 00:15BA: A0 02        H113    LDY     #2              ;value for .wor for flag
  2112 00:15BC: 84 29        H13A    STY     BYWOR           ;save .byt or .wor flag
  2113 00:15BE: 20 C7 0A             JSR     FNDNB           ;find next non-blank
  2114 00:15C1: B0 03                BCS     HBW10
  2115 00:15C3: 4C 13 17             JMP     HLY07E
  2116 00:15C6: 20 9E 0B     HBW10   JSR     EVAL            ;evaluate expression
  2117 00:15C9: A5 34                LDA     RETURN          ;get return code
  2118 00:15CB: F0 5B                BEQ     HBW40           ;undefined symbol
  2119 00:15CD: 10 5D                BPL     HBW60           ;uninterpretable
  2120 00:15CF: 86 1E                STX     COLP            ;else set pointer to next
  2121 00:15D1: A6 29                LDX     BYWOR           ;get flag
  2122 00:15D3: A0 00                LDY     #0              ;point to low part of code
  2123 00:15D5: A5 24                LDA     EXP+1           ;get low part of result
  2124 00:15D7: 99 00 2E             STA     CODE,Y          ;save in code buffer
  2125 00:15DA: E0 02                CPX     #2              ;see if .wor
  2126 00:15DC: D0 06                BNE     HBW20A          ;jump if not
  2127 00:15DE: A5 23                LDA     EXP             ;if .wor get high part
  2128 00:15E0: C8                   INY                     ;bump code index
  Tue Sep 27 2022  1:06                                                                                                    Page 35


  2129 00:15E1: 99 00 2E             STA     CODE,Y          ;and save high part
  2130 00:15E4: A5 1D        HBW20A  LDA     FLAGS+1
  2131 00:15E6: 29 09                AND     #9
  2132 00:15E8: D0 08                BNE     HBW20B
  2133 00:15EA: E0 01                CPX     #1
  2134 00:15EC: D0 0D                BNE     HBW20C
  2135 00:15EE: A5 23                LDA     EXP
  2136 00:15F0: F0 09                BEQ     HBW20C
  2137 00:15F2: A4 29        HBW20B  LDY     BYWOR
  2138 00:15F4: A9 04                LDA     #4
  2139 00:15F6: A6 1F                LDX     CSB
  2140 00:15F8: 4C FF 15             JMP     HIYAAX
  2141 00:15FB: A4 29        HBW20C  LDY     BYWOR
  2142 00:15FD: A9 00        HIY00X  LDA     #0
  2143 00:15FF: 20 B6 10     HIYAAX  JSR     LTINS
  2144 00:1602: A6 1E        HBW30   LDX     COLP            ;get pointer
  2145 00:1604: E4 26                CPX     MAXCL           ;see if at max
  2146 00:1606: F0 02                BEQ     *+4             ;ok if is
  2147 00:1608: B0 0E                BCS     EXTBYT          ;done if past last
  2148 00:160A: BD 4C 2E             LDA     LINE,X          ;and char
  2149 00:160D: C9 2C                CMP     #','            ;see if comma
  2150 00:160F: F0 0A                BEQ     GOTCMA          ;ok if is
  2151 00:1611: C9 20                CMP     #blank          ;see if space
  2152 00:1613: F0 03                BEQ     EXTBYT          ;exit if is
  2153 00:1615: 4C FE 17     BADOPR  JMP     HL318B          ;bad operand format
  2154 00:1618: 4C 31 19     EXTBYT  JMP     NXT             ;else end of line
  2155 00:161B: 20 87 0A     GOTCMA  JSR     INCRP
  2156 00:161E: 86 1E                STX     COLP
  2157 00:1620: 20 C7 0A             JSR     FNDNB
  2158 00:1623: B0 A1                BCS     HBW10
  2159 00:1625: 4C 21 17             JMP     HL307B
  2160 00:1628: A9 06        HBW40   LDA     #6
  2161 00:162A: D0 19                BNE     HIJAAJ
  2162                        ;expression evaluation said expression uninterpretable
  2163                        ;so test for string
  2164 00:162C: BD 4C 2E     HBW60   LDA     LINE,X          ;get first char
  2165 00:162F: 85 7B                sta     strdel          ;save for later use
  2166 00:1631: C9 27                CMP     #apost          ;see if '
  2167 00:1633: F0 04                beq     hbw60v          ;is so may be string
  2168 00:1635: C9 22                cmp     #quote          ;also check "
  2169 00:1637: D0 0A                BNE     HBW60A          ;not so is ERR13 - invalid exp
  2170 00:1639: E4 1F        hbw60v  CPX     CSB             ;may be start of string so check
  2171 00:163B: D0 06                BNE     HBW60A          ;jump to ERR13 if index and string start not =
  2172 00:163D: A4 29                LDY     BYWOR           ;get mode flag
  2173 00:163F: C0 01                CPY     #1              ;see if .byt
  2174 00:1641: F0 0E                BEQ     HBW60B          ;is so get string
  2175 00:1643: A9 0D        HBW60A  LDA     #13
  2176 00:1645: 48           HIJAAJ  PHA                     ;save error code
  2177 00:1646: 20 1F 0B             JSR     FNCMP           ;skip to next field
  2178 00:1649: 68                   PLA                     ;get error code back
  2179 00:164A: A4 29                LDY     BYWOR
  2180 00:164C: A6 3B                LDX     ERCOL
  2181 00:164E: 4C FF 15             JMP     HIYAAX
  2182                        ;start processing .byt '....'
  2183 00:1651: 86 1E        HBW60B  STX     COLP            ;save pointer
  2184 00:1653: A0 00                LDY     #0              ;set index to start
  2185                        ;loop entry for .byt '....' processing
  2186 00:1655: A6 1E        HBW70   LDX     COLP            ;get pointer
  2187 00:1657: 20 87 0A             JSR     INCRP           ;go to next char
  2188 00:165A: 86 1E                STX     COLP            ;save pointer
  2189 00:165C: 90 03                BCC     *+5             ;jump is not eol
  2190 00:165E: 4C 23 17             JMP     HLY07B          ;else ran off eol error
  2191 00:1661: BD 4C 2E             LDA     LINE,X          ;get char
  Tue Sep 27 2022  1:06                                                                                                    Page 36


  2192 00:1664: C5 7B                cmp     strdel          ;see if same as start delimiter
  2193 00:1666: D0 10                BNE     HBW80           ;if not go test for valid
  2194                        ;have a valid string delimiter
  2195 00:1668: A6 1E                LDX     COLP            ;get pointer
  2196 00:166A: 20 87 0A             JSR     INCRP           ;go to next char
  2197 00:166D: 86 1E                STX     COLP            ;save pointer
  2198 00:166F: B0 8C                BCS     HIY00X          ;if eol go to eol processing
  2199 00:1671: BD 4C 2E             LDA     LINE,X          ;get char
  2200 00:1674: C5 7B                CMP     strdel          ;see if same as first delimiter
  2201 00:1676: D0 85                BNE     HIY00X          ;not so not double
  2202                        ;have a character - see if valid
  2203 00:1678: C9 20        HBW80   CMP     #blank          ;see if less than space
  2204 00:167A: 90 04                BCC     HBW80A          ;is so enter 0
  2205 00:167C: C9 7F                CMP     #DELETE         ;see if < delete
  2206 00:167E: 90 02                BCC     HBW80B          ;is so valid char
  2207 00:1680: A9 00        HBW80A  LDA     #0
  2208 00:1682: 99 00 2E     HBW80B  STA     CODE,Y          ;save char in code buffer
  2209 00:1685: C8                   INY                     ;point to next buffer position
  2210 00:1686: 4C 55 16             JMP     HBW70           ;and loop for more
  2211                        ;process .opt directive
  2212 00:1689: 20 C7 0A     H301    JSR     FNDNB
  2213 00:168C: B0 03                BCS     *+5
  2214 00:168E: 4C AD 13             JMP     HL0000
  2215 00:1691: A6 1F                LDX     CSB
  2216 00:1693: A9 03                LDA     #3
  2217 00:1695: 85 2D                STA     LEN
  2218 00:1697: 20 7B 0B             JSR     CONSYM
  2219 00:169A: B0 03                BCS     *+5
  2220 00:169C: 4C 6A 15             JMP     HL014B
  2221 00:169F: A9 05                LDA     #<OPTDIR
  2222 00:16A1: 85 11                STA     TBLPTR
  2223 00:16A3: A9 1F                LDA     #>OPTDIR
  2224 00:16A5: 85 12                STA     TBLPTR+1
  2225 00:16A7: A2 09                LDX     #NUMSAV-1
  2226 00:16A9: 4C 73 15             JMP     H9938
  2227                        ;generate kim file
  2228 00:16AC: 09 20        KIM     ORA     #%00100000      ;set bit
  2229 00:16AE: D0 26                BNE     H390
  2230                        ;do not generate kim file
  2231 00:16B0: 29 DF        NOKIM   AND     #%11011111      ;clear bit
  2232 00:16B2: 4C D6 16             JMP     H390
  2233 00:16B5: 29 7F        H323    AND     #127
  2234 00:16B7: 4C D6 16             JMP     H390
  2235 00:16BA: 09 80        H302    ORA     #128
  2236 00:16BC: D0 18                BNE     H390
  2237 00:16BE: 09 40        H303    ORA     #64
  2238 00:16C0: D0 14                BNE     H390
  2239 00:16C2: 29 BF        H304    AND     #191
  2240 00:16C4: 4C D6 16             JMP     H390
  2241 00:16C7: 09 10        H307    ORA     #16
  2242 00:16C9: D0 0B                BNE     H390
  2243 00:16CB: 29 EF        H308    AND     #239
  2244 00:16CD: 4C D6 16             JMP     H390
  2245 00:16D0: 09 04        H311    ORA     #4
  2246 00:16D2: D0 02                BNE     H390
  2247 00:16D4: 29 FB        H312    AND     #251
  2248 00:16D6: 85 1C        H390    STA     FLAGS
  2249 00:16D8: 20 1F 0B     H390A   JSR     FNCMP
  2250 00:16DB: B0 03                BCS     H8840
  2251 00:16DD: 4C AD 13     H8839   JMP     HL0000
  2252 00:16E0: BD 4C 2E     H8840   LDA     LINE,X
  2253 00:16E3: C9 2C                CMP     #','
  2254 00:16E5: D0 F6                BNE     H8839
  Tue Sep 27 2022  1:06                                                                                                    Page 37


  2255 00:16E7: E8                   INX
  2256 00:16E8: 86 1E                STX     COLP
  2257 00:16EA: 4C 89 16             JMP     H301
  2258                        ;opcode & operand psocessing section
  2259                        ;first clear flags and values
  2260 00:16ED: A9 00        H201    LDA     #0
  2261 00:16EF: 85 38                STA     OPTYP
  2262 00:16F1: 85 37                STA     OPLEN
  2263 00:16F3: 85 39                STA     NOPV
  2264 00:16F5: A8                   TAY
  2265 00:16F6: A5 35                LDA     OPBAS           ;this was set by OPFND
  2266 00:16F8: 8D 00 2E             STA     CODE
  2267 00:16FB: A5 36                LDA     OPTEM
  2268 00:16FD: C9 14                CMP     #20
  2269 00:16FF: D0 05                BNE     H17
  2270 00:1701: A0 01        HL1000  LDY     #1
  2271 00:1703: 4C AF 13             JMP     HLY000
  2272 00:1706: A5 20        H17     LDA     CSE
  2273 00:1708: 85 1E                STA     COLP
  2274 00:170A: E6 1E                INC     COLP
  2275 00:170C: 20 C7 0A             JSR     FNDNB
  2276 00:170F: B0 09                BCS     H9917
  2277 00:1711: A0 03                LDY     #3
  2278                        ;ERR07 - ran off line at CSE
  2279 00:1713: A9 07        HLY07E  LDA     #7
  2280 00:1715: A6 20                LDX     CSE
  2281 00:1717: 4C 2E 19             JMP     LTS1
  2282 00:171A: BD 4C 2E     H9917   LDA     LINE,X
  2283 00:171D: C9 3B                CMP     #semico
  2284 00:171F: D0 07                BNE     H9934
  2285 00:1721: A0 03        HL307B  LDY     #3
  2286 00:1723: A9 07        HLY07B  LDA     #7
  2287 00:1725: 4C DA 13             JMP     HLYAAB
  2288 00:1728: C9 41        H9934   CMP     #'A'
  2289 00:172A: D0 20                BNE     H39
  2290 00:172C: E4 26                CPX     MAXCL
  2291 00:172E: F0 07                BEQ     H9965
  2292 00:1730: BC 4D 2E             LDY     LINE+1,X
  2293 00:1733: C0 20                CPY     #blank
  2294 00:1735: D0 15                BNE     H39
  2295 00:1737: A4 36        H9965   LDY     OPTEM
  2296 00:1739: B9 D9 1F             LDA     KLTBL-1,Y
  2297 00:173C: 30 09                BMI     HL305B
  2298 00:173E: 18                   CLC
  2299 00:173F: 65 35                ADC     OPBAS
  2300 00:1741: 8D 00 2E             STA     CODE
  2301 00:1744: 4C 01 17             JMP     HL1000
  2302 00:1747: A9 05        HL305B  LDA     #5
  2303 00:1749: 4C D8 13             JMP     HL3AAB
  2304 00:174C: C9 23        H39     CMP     #'#'
  2305 00:174E: D0 05                BNE     H24
  2306 00:1750: A9 0A                LDA     #10
  2307 00:1752: 4C 5B 17             JMP     H831
  2308 00:1755: C9 28        H24     CMP     #'('
  2309 00:1757: D0 0E                BNE     H23
  2310 00:1759: A9 05                LDA     #5
  2311 00:175B: 85 38        H831    STA     OPTYP
  2312 00:175D: E6 1F                INC     CSB
  2313 00:175F: 20 87 0A             JSR     INCRP
  2314 00:1762: 90 03                BCC     H23
  2315 00:1764: 4C 21 17             JMP     HL307B
  2316                        ;evaluate the operand
  2317 00:1767: 20 9E 0B     H23     JSR     EVAL
  Tue Sep 27 2022  1:06                                                                                                    Page 38


  2318 00:176A: A5 34                LDA     RETURN          ;test result code
  2319 00:176C: 30 5C                BMI     H20             ;jump if it was good!
  2320 00:176E: A5 38                LDA     OPTYP           ;if bad see if was immediate mode
  2321 00:1770: C9 0A                CMP     #10
  2322 00:1772: F0 11                BEQ     H9935           ;if so may be single ascii char
  2323 00:1774: A5 34                LDA     RETURN
  2324 00:1776: F0 4C                BEQ     H202
  2325                        ;at this point we have a goofy expression
  2326                        ;make a check for relative addressing so only two bytes
  2327                        ;get allocated during first pass
  2328 00:1778: A5 36                lda     optem           ;get template
  2329 00:177A: C9 0E                cmp     #14             ;see if relative
  2330 00:177C: F0 3D                beq     bad2by          ;if so allocate only two bytes
  2331                        ;goofy expression and 3 byte instruction
  2332 00:177E: A9 0D        HL313J  LDA     #13
  2333 00:1780: A6 3B        HL3AAJ  LDX     ERCOL
  2334 00:1782: 4C FD 13             JMP     HL3AAX
  2335                        ;bad expression and immediate mode
  2336 00:1785: BD 4C 2E     H9935   LDA     LINE,X          ;get character
  2337                        ;first see if a single character
  2338 00:1788: C9 27                CMP     #apost          ;look for starting '
  2339 00:178A: D0 2F                BNE     BAD2BY          ;no so say is bad
  2340 00:178C: 20 87 0A             JSR     INCRP           ;bump pointer
  2341 00:178F: 90 05                BCC     *+7             ;jump if not at end
  2342 00:1791: A0 02                LDY     #2              ;else flag as error
  2343 00:1793: 4C 23 17             JMP     HLY07B
  2344 00:1796: BD 4C 2E             LDA     LINE,X          ;get char after '
  2345 00:1799: C9 20                CMP     #blank          ;see if smaller than space
  2346 00:179B: 90 04                BCC     H9921           ;is so value 0
  2347 00:179D: C9 7F                CMP     #DELETE         ;see if smaller than DELETE
  2348 00:179F: 90 02                BCC     H9922           ;is so store as result
  2349 00:17A1: A9 00        H9921   LDA     #0              ;clear low byte (hl order)
  2350 00:17A3: 85 24        H9922   STA     EXP+1           ;store low (0 or char)
  2351 00:17A5: A9 00                LDA     #0              ;high part always 0
  2352 00:17A7: 85 23                STA     EXP
  2353 00:17A9: A9 F6                LDA     #%11110110      ;set flag asno overflow & pos
  2354 00:17AB: 25 1D                AND     FLAGS+1
  2355 00:17AD: 85 1D                STA     FLAGS+1
  2356 00:17AF: 20 87 0A             JSR     INCRP           ;look for next char
  2357                        ;code at this point allows single character to be terminated by
  2358                        ;end of line or a blank - this is candidate for change to restrict
  2359                        ;syntax.
  2360 00:17B2: B0 16                BCS     H20             ;reached EOL
  2361 00:17B4: BD 4C 2E             LDA     LINE,X          ;get char
  2362 00:17B7: C9 20                CMP     #blank          ;see if space
  2363 00:17B9: F0 0F                BEQ     H20             ;if so OK
  2364                        ;we have a bad 2-byte instruction so ERR 13
  2365 00:17BB: A9 0D        BAD2BY  LDA     #13
  2366 00:17BD: A6 3B        hl2aaj  LDX     ERCOL
  2367 00:17BF: A0 02                LDY     #2
  2368 00:17C1: 4C 2E 19             JMP     LTS1
  2369 00:17C4: E6 39        H202    INC     NOPV
  2370 00:17C6: A9 02                LDA     #2
  2371 00:17C8: 85 37                STA     OPLEN
  2372 00:17CA: 20 1F 0B     H20     JSR     FNCMP           ;find non-embedded , or )
  2373 00:17CD: 90 57                BCC     H500            ;jump if none found
  2374 00:17CF: BD 4C 2E             LDA     LINE,X          ;get the char
  2375 00:17D2: C9 29                CMP     #')'
  2376 00:17D4: D0 1B                BNE     H51
  2377 00:17D6: E6 38                INC     OPTYP
  2378 00:17D8: E6 38                INC     OPTYP
  2379 00:17DA: A5 35                LDA     OPBAS
  2380 00:17DC: C9 4C                CMP     #$4C
  Tue Sep 27 2022  1:06                                                                                                    Page 39


  2381 00:17DE: F0 4C                BEQ     H140
  2382 00:17E0: 20 87 0A             JSR     INCRP
  2383 00:17E3: 90 03                BCC     *+5             ;ok if a char
  2384 00:17E5: 4C 21 17             JMP     HL307B
  2385 00:17E8: BD 4C 2E             LDA     LINE,X          ;get char
  2386 00:17EB: C9 2C                CMP     #','            ;see if comma
  2387 00:17ED: F0 14                BEQ     H51A            ;branch if n),
  2388 00:17EF: D0 0D                BNE     HL318B          ;else n) is illegal
  2389 00:17F1: BD 4C 2E     H51     LDA     LINE,X
  2390 00:17F4: C9 2C                CMP     #','
  2391 00:17F6: D0 13                BNE     H203
  2392 00:17F8: A5 35                LDA     OPBAS           ;get base opcode
  2393 00:17FA: C9 4C                CMP     #$4C            ;see if JMP
  2394 00:17FC: D0 05                BNE     H51A            ;jump if not
  2395                        ;if is then is illegal operand for JMP
  2396 00:17FE: A9 12        HL318B  LDA     #18             ;error 18
  2397 00:1800: 4C D8 13             JMP     HL3AAB
  2398 00:1803: 20 87 0A     H51A    JSR     INCRP           ;look for next char
  2399 00:1806: 90 03                BCC     H203            ;jump if OK
  2400 00:1808: 4C 21 17             JMP     HL307B
  2401 00:180B: BD 4C 2E     H203    LDA     LINE,X          ;get char
  2402 00:180E: C9 58                CMP     #'X'
  2403 00:1810: D0 05                BNE     H25
  2404 00:1812: E6 38                INC     OPTYP
  2405 00:1814: 4C 4B 18             JMP     H40
  2406 00:1817: C9 59        H25     CMP     #'Y'
  2407 00:1819: F0 05                BEQ     H27
  2408 00:181B: A9 0C                LDA     #12
  2409 00:181D: 4C FD 13             JMP     HL3AAX
  2410 00:1820: E6 38        H27     INC     OPTYP
  2411 00:1822: E6 38                INC     OPTYP
  2412 00:1824: D0 25                BNE     H40
  2413 00:1826: A5 35        H500    LDA     OPBAS           ;get base opcode
  2414 00:1828: C9 4C                CMP     #$4C            ;see if JMP
  2415 00:182A: D0 1F                BNE     H40             ;jump if not
  2416 00:182C: A5 38        H140    LDA     OPTYP
  2417 00:182E: D0 07                BNE     H145
  2418 00:1830: A0 02        H140A   LDY     #2
  2419 00:1832: 84 37                STY     OPLEN
  2420 00:1834: 4C E4 18             JMP     H46
  2421 00:1837: C9 07        H145    CMP     #7
  2422 00:1839: D0 C3                BNE     HL318B
  2423 00:183B: A9 20                LDA     #32
  2424 00:183D: 20 87 0A             JSR     INCRP
  2425 00:1840: B0 EE                BCS     H140A
  2426 00:1842: BC 4C 2E             LDY     LINE,X
  2427 00:1845: C0 20                CPY     #blank
  2428 00:1847: F0 E7                BEQ     H140A
  2429 00:1849: D0 B3                BNE     HL318B
  2430 00:184B: A5 39        H40     LDA     NOPV
  2431 00:184D: D0 4E                BNE     H41
  2432 00:184F: A9 02                LDA     #2
  2433 00:1851: 85 37                STA     OPLEN
  2434 00:1853: A5 36                LDA     OPTEM
  2435 00:1855: C9 0E                CMP     #14
  2436 00:1857: D0 18                BNE     H22
  2437 00:1859: A5 1A                LDA     PC
  2438 00:185B: 85 3D                STA     TEMP
  2439 00:185D: A5 1B                LDA     PC+1
  2440 00:185F: 85 3E                STA     TEMP+1
  2441 00:1861: 20 9C 0A             JSR     RELADR
  2442 00:1864: B0 07                BCS     HOP70
  2443 00:1866: A9 11                lda     #17             ;relative branch out of range error
  Tue Sep 27 2022  1:06                                                                                                    Page 40


  2444 00:1868: A0 02        hl2aab  ldy     #2              ;do a two byte error for code in a
  2445 00:186A: 4C DA 13             jmp     hlyaab          ;do it
  2446 00:186D: A9 00        HOP70   LDA     #0
  2447 00:186F: 85 23                STA     EXP
  2448 00:1871: A5 38        H22     LDA     OPTYP
  2449 00:1873: C9 06                CMP     #6
  2450 00:1875: 90 0E                BCC     H400
  2451 00:1877: C9 0A                CMP     #10
  2452 00:1879: B0 0A                BCS     H400
  2453 00:187B: 20 8E 0A             JSR     INDADR
  2454 00:187E: B0 05                BCS     H400
  2455 00:1880: A9 13                lda     #19             ;indirect operand out-of-range
  2456 00:1882: 4C BD 17             jmp     hl2aaj          ;do two byte error
  2457 00:1885: A5 23        H400    LDA     EXP
  2458 00:1887: D0 14                BNE     H41
  2459 00:1889: A9 01                LDA     #1
  2460 00:188B: 85 37                STA     OPLEN
  2461 00:188D: A5 38                LDA     OPTYP
  2462 00:188F: 18                   CLC
  2463 00:1890: 69 02                ADC     #2
  2464 00:1892: 85 38                STA     OPTYP
  2465 00:1894: C9 0D        H50     CMP     #13
  2466 00:1896: 90 10                BCC     H45
  2467 00:1898: A9 0F                LDA     #15
  2468 00:189A: 4C D8 13             JMP     HL3AAB
  2469 00:189D: A5 38        H41     LDA     OPTYP
  2470 00:189F: 18                   CLC
  2471 00:18A0: 69 0D                ADC     #13
  2472 00:18A2: 85 38                STA     OPTYP
  2473 00:18A4: C9 10        H47     CMP     #16
  2474 00:18A6: B0 0E                BCS     H49
  2475 00:18A8: A8           H45     TAY
  2476 00:18A9: 88                   DEY
  2477 00:18AA: B9 CB 1F             LDA     KLUDG,Y
  2478 00:18AD: 18                   CLC
  2479 00:18AE: 65 36                ADC     OPTEM
  2480 00:18B0: A8                   TAY
  2481 00:18B1: B9 DA 1F             LDA     KLTBL,Y
  2482 00:18B4: 10 2E                BPL     H46
  2483 00:18B6: A5 39        H49     LDA     NOPV
  2484 00:18B8: F0 15                BEQ     H48
  2485 00:18BA: A5 37                LDA     OPLEN
  2486 00:18BC: C9 02                CMP     #2
  2487 00:18BE: F0 03                BEQ     *+5
  2488 00:18C0: 4C FE 17             JMP     HL318B
  2489 00:18C3: C6 37                DEC     OPLEN
  2490 00:18C5: A5 38                LDA     OPTYP
  2491 00:18C7: 38                   SEC
  2492 00:18C8: E9 0B                SBC     #11
  2493 00:18CA: 85 38                STA     OPTYP
  2494 00:18CC: 4C 94 18             JMP     H50
  2495 00:18CF: A5 37        H48     LDA     OPLEN
  2496 00:18D1: C9 01                CMP     #1
  2497 00:18D3: F0 03                BEQ     *+5
  2498 00:18D5: 4C FE 17             JMP     HL318B
  2499 00:18D8: E6 37                INC     OPLEN
  2500 00:18DA: A5 38                LDA     OPTYP
  2501 00:18DC: 18                   CLC
  2502 00:18DD: 69 0B                ADC     #11
  2503 00:18DF: 85 38                STA     OPTYP
  2504 00:18E1: 4C A4 18             JMP     H47
  2505 00:18E4: 18           H46     CLC
  2506 00:18E5: 65 35                ADC     OPBAS
  Tue Sep 27 2022  1:06                                                                                                    Page 41


  2507 00:18E7: A0 00                LDY     #0
  2508 00:18E9: 99 00 2E             STA     CODE,Y
  2509 00:18EC: A5 39                LDA     NOPV
  2510 00:18EE: D0 30                BNE     HL301X
  2511 00:18F0: C8                   INY
  2512 00:18F1: A5 24                LDA     EXP+1
  2513 00:18F3: 99 00 2E             STA     CODE,Y
  2514 00:18F6: C8                   INY
  2515 00:18F7: A5 37                LDA     OPLEN
  2516 00:18F9: C9 01                CMP     #1
  2517 00:18FB: F0 05                BEQ     H9931A
  2518 00:18FD: A5 23                LDA     EXP
  2519 00:18FF: 99 00 2E             STA     CODE,Y
  2520 00:1902: A9 09        H9931A  LDA     #9
  2521 00:1904: 25 1D                AND     FLAGS+1
  2522 00:1906: F0 08                BEQ     H9931B
  2523 00:1908: A4 37        HLJ04B  LDY     OPLEN
  2524 00:190A: C8                   INY
  2525 00:190B: A9 04                LDA     #4
  2526 00:190D: 4C DA 13             JMP     HLYAAB
  2527 00:1910: A5 37        H9931B  LDA     OPLEN
  2528 00:1912: C9 01                CMP     #1
  2529 00:1914: D0 04                BNE     HLJ000
  2530 00:1916: A5 23                LDA     EXP
  2531 00:1918: D0 EE                BNE     HLJ04B
  2532 00:191A: A4 37        HLJ000  LDY     OPLEN
  2533 00:191C: C8                   INY
  2534 00:191D: 4C AF 13             JMP     HLY000
  2535 00:1920: AD 00 2E     HL301X  LDA     CODE
  2536 00:1923: A0 03                LDY     #3
  2537 00:1925: 29 1F                AND     #$1F
  2538 00:1927: C9 10                CMP     #$10
  2539 00:1929: D0 01                BNE     *+3
  2540 00:192B: 88                   DEY
  2541 00:192C: A9 01                LDA     #1
  2542                        ;general error handler
  2543                        ;first inserts an error code into table
  2544                        ;then resets stack so that system returns to recovery point
  2545                        ;regardless of how far down the parser has gone.
  2546                        ;ASM resets stack to $FF so this is what defines recovery point
  2547                        ;       STACK = $FD --> after JSR DOPASS (either 1st or 2nd)
  2548                        ;       STACK = $FB --> after JSR PROCES
  2549                        ;c=0 so DOPASS will try next line
  2550 00:192E: 20 B6 10     LTS1    JSR     LTINS           ;save code
  2551 00:1931: A2 FB        NXT     LDX     #$FB            ;recover to JSR PROCES
  2552 00:1933: 9A                   TXS
  2553 00:1934: 18                   CLC                     ;not EOF
  2554 00:1935: 60                   RTS
  2555                        ;do one pass through the source file
  2556                        DOPASS
  2557                        ;        LDA     #SRCBUF+SRCLNG*256/256  ;set index
  2558                        ;        LDY     #SRCBUF+SRCLNG/256      ;to
  2559                        
  2560 00:1936: A9 00                LDA     #<SRCBUF+SRCLNG
  2561 00:1938: A0 26                LDY     #>SRCBUF+SRCLNG
  2562                        
  2563 00:193A: 85 03                STA     SRCIND          ;illegal
  2564 00:193C: 84 04                STY     SRCIND+1        ;value
  2565 00:193E: 20 69 13             JSR     PROCES
  2566 00:1941: 90 FB                BCC     *-3
  2567 00:1943: 60                   RTS
  2568                        ;-------------------------------
  2569                        ;MAIN PROCESSING ROUTINE
  Tue Sep 27 2022  1:06                                                                                                    Page 42


  2570                        ;-------------------------------
  2571 00:1944: A9 03        MAIN    LDA     #<STRMSG        ;point to
  2572 00:1946: A0 1B                LDY     #>STRMSG        ;start message
  2573 00:1948: 20 50 08             JSR     WRCNMS          ;write it
  2574                        ;clear page zero
  2575 00:194B: A2 02                LDX     #2              ;set index
  2576 00:194D: A9 00                LDA     #0              ;clear a
  2577 00:194F: 95 00        CLRZP   STA     $00,X           ;clear mem
  2578 00:1951: E8                   inx                     ;bump count
  2579 00:1952: E0 7C                CPX     #lastzp         ;compare to end
  2580 00:1954: D0 F9                BNE     CLRZP           ;loop if more
  2581                        ;make sure SYMLEN at least 6
  2582 00:1956: AD 03 08             lda     symlen          ;get symbol length
  2583 00:1959: C9 06                cmp     #6              ;and test
  2584 00:195B: B0 05                bcs     symlok          ;ok if >= 6
  2585 00:195D: A9 06                lda     #6              ;else force to 6
  2586 00:195F: 8D 03 08             sta     symlen
  2587                        ;check default FCB for valid UFN for source
  2588 00:1962: A2 08        symlok  LDX     #8
  2589 00:1964: BD 07 01     SFB     LDA     DFLFCB,X
  2590 00:1967: C9 3F                CMP     #'?'
  2591 00:1969: F0 0E                BEQ     BDF             ;is an AFN so not valid
  2592 00:196B: 9D 1C 21             STA     SRCFCB,X
  2593 00:196E: 9D 3D 21             STA     KIMFCB,X
  2594 00:1971: 9D 5E 21             STA     LSTFCB,X        ;insert in list fcb
  2595 00:1974: CA                   DEX
  2596 00:1975: 10 ED                BPL     SFB
  2597 00:1977: 30 03                BMI     *+5
  2598 00:1979: 4C 86 08     BDF     JMP     DOSERR          ;abort for disk error
  2599 00:197C: AD 10 01             lda     dflfcb+9        ;get source loc if any
  2600 00:197F: C9 20                cmp     #blank          ;see if blank
  2601 00:1981: F0 3B                beq     usedfl          ;use default if is
  2602 00:1983: 20 29 08             jsr     chkdrv          ;check for legal
  2603 00:1986: 8D 1C 21             sta     srcfcb          ;and set
  2604 00:1989: AD 11 01             lda     dflfcb+10       ;try for kim
  2605 00:198C: C9 20                cmp     #blank          ;see if none
  2606 00:198E: F0 2E                beq     usedfl          ;use default if so
  2607 00:1990: C9 5A                cmp     #'Z'            ;see if Z
  2608 00:1992: D0 05                bne     trykah          ;if not try for a-h
  2609 00:1994: 38                   sec                     ;else set no kim flag
  2610 00:1995: 66 7A                ror     nkmflg
  2611 00:1997: 30 06                bmi     tstprn          ;then go try prn
  2612 00:1999: 20 29 08     trykah  jsr     chkdrv          ;else go check
  2613 00:199C: 8D 3D 21             sta     kimfcb          ;and set
  2614 00:199F: AD 12 01     tstprn  lda     dflfcb+11       ;try list
  2615 00:19A2: C9 20                cmp     #blank          ;do same for it
  2616 00:19A4: F0 18                beq     usedfl          ;if blank
  2617 00:19A6: C9 58                cmp     #'X'            ;see if X
  2618 00:19A8: D0 05                bne     trylst          ;if not try Z
  2619 00:19AA: 38                   sec                     ;set console output
  2620 00:19AB: 66 78                ror     lstflg
  2621 00:19AD: 30 0F                bmi     usedfl          ;and press on
  2622 00:19AF: C9 5A        trylst  cmp     #'Z'            ;see if Z
  2623 00:19B1: D0 05                bne     tryah           ;if not try a to h
  2624 00:19B3: 38                   sec                     ;set no list flag
  2625 00:19B4: 66 79                ror     nlsflg
  2626 00:19B6: 30 06                bmi     usedfl          ;and press
  2627 00:19B8: 20 29 08     tryah   jsr     chkdrv          ;then check
  2628 00:19BB: 8D 5E 21             sta     lstfcb          ;and set
  2629 00:19BE: 20 90 08     usedfl  JSR     SSRFCB
  2630 00:19C1: 20 54 08             JSR     OPNFIL
  2631 00:19C4: F0 B3                BEQ     BDF
  2632 00:19C6: 20 9F 08             JSR     DLTKIM
  Tue Sep 27 2022  1:06                                                                                                    Page 43


  2633 00:19C9: 24 7A                bit     nkmflg          ;test no kim flag
  2634 00:19CB: 30 10                bmi     skpkim          ;skip if set
  2635 00:19CD: 20 95 08             JSR     SKMFCB
  2636 00:19D0: 20 60 08             JSR     CRTFIL
  2637 00:19D3: F0 A4                BEQ     BDF
  2638 00:19D5: 20 95 08             JSR     SKMFCB
  2639 00:19D8: 20 54 08             JSR     OPNFIL
  2640 00:19DB: F0 9C                BEQ     BDF
  2641 00:19DD: 20 9A 08     skpkim  JSR     SLSFCB          ;point to list fcb
  2642 00:19E0: 20 5C 08             JSR     DLTFIL          ;delete it
  2643 00:19E3: A5 78                lda     lstflg          ;see if no .prn file
  2644 00:19E5: 05 79                ora     nlsflg
  2645 00:19E7: 30 10                bmi     skplst          ;if so skip ahead
  2646 00:19E9: 20 9A 08             JSR     SLSFCB          ;point again
  2647 00:19EC: 20 60 08             JSR     CRTFIL          ;now make it
  2648 00:19EF: F0 88                BEQ     BDF             ;exit if bad
  2649 00:19F1: 20 9A 08             JSR     SLSFCB          ;point once more
  2650 00:19F4: 20 54 08             JSR     OPNFIL          ;open it
  2651 00:19F7: F0 80                BEQ     BDF             ;exit if bad
  2652 00:19F9: A9 F4        skplst  LDA     #%11110100      ;set default
  2653 00:19FB: 85 1C                STA     FLAGS           ;flags
  2654                        ;calculate symbol table start address
  2655 00:19FD: A9 00                lda     #<sym           ;get buffer start
  2656 00:19FF: A0 2F                ldy     #>sym
  2657 00:1A01: 18                   clc                     ;no add symbol length
  2658 00:1A02: 6D 03 08             adc     symlen
  2659 00:1A05: 85 09                sta     stsave          ;set low
  2660 00:1A07: 90 01                bcc     sthiok          ;high ok if no carry
  2661 00:1A09: C8                   iny                     ;else bump high
  2662 00:1A0A: 84 0A        sthiok  sty     stsave+1        ;save high
  2663                        ;now calculate upper limit
  2664 00:1A0C: AD 04 01             LDA     PEM+1           ;get pem address
  2665 00:1A0F: AC 05 01             LDY     PEM+2
  2666 00:1A12: 38                   SEC                     ;drop by symbol length
  2667 00:1A13: ED 03 08             SBC     symlen
  2668 00:1A16: 85 0B                STA     TBLSZ
  2669 00:1A18: B0 01                BCS     *+3
  2670 00:1A1A: 88                   DEY
  2671 00:1A1B: 84 0C                STY     TBLSZ+1
  2672 00:1A1D: 38                   sec                     ;drop by two more
  2673 00:1A1E: A5 0B                lda     tblsz
  2674 00:1A20: E9 02                sbc     #2
  2675 00:1A22: 85 0B                sta     tblsz
  2676 00:1A24: B0 02                bcs     ntborw          ;done if no borrow
  2677 00:1A26: C6 0C                dec     tblsz+1
  2678 00:1A28: A2 FF        ntborw  LDX     #$FF
  2679 00:1A2A: 9A                   TXS
  2680 00:1A2B: A9 D1                lda     #<ps1msg        ;send start of pass 1 msg
  2681 00:1A2D: A0 1A                ldy     #>ps1msg
  2682 00:1A2F: 20 50 08             jsr     wrcnms
  2683 00:1A32: 20 36 19             JSR     DOPASS
  2684 00:1A35: A9 3F                LDA     #<SRTMSG        ;point to
  2685 00:1A37: A0 1B                LDY     #>SRTMSG        ;end of pass one message
  2686 00:1A39: 20 50 08             JSR     WRCNMS          ;print it
  2687 00:1A3C: A9 00                LDA     #0
  2688 00:1A3E: 85 14                STA     LINENO
  2689 00:1A40: 85 15                STA     LINENO+1
  2690 00:1A42: 85 1A                STA     PC
  2691 00:1A44: 85 1B                STA     PC+1
  2692 00:1A46: 85 18                STA     ERCT
  2693 00:1A48: 85 19                STA     ERCT+1
  2694 00:1A4A: 85 4B                STA     BYTCNT
  2695 00:1A4C: 8D 28 21             STA     SRCFCB+12
  Tue Sep 27 2022  1:06                                                                                                    Page 44


  2696 00:1A4F: 8D 29 21             sta     srcfcb+13       ;clear both extent bytes
  2697 00:1A52: 8D 3C 21             STA     SRCFCB+32
  2698 00:1A55: A9 F4                LDA     #%11110100      ;set default
  2699 00:1A57: 85 1C                STA     FLAGS           ;flags
  2700 00:1A59: A9 FF                LDA     #$FF            ;change
  2701 00:1A5B: 85 02                STA     PASNUM          ;pass number
  2702 00:1A5D: 20 90 08             JSR     SSRFCB
  2703 00:1A60: 20 54 08             JSR     OPNFIL
  2704 00:1A63: 20 02 0A             JSR     SORT            ;sort symbol table
  2705 00:1A66: 20 DE 09             JSR     CCRLF           ;send cr and lf to console
  2706 00:1A69: A9 E3                lda     #<ps2msg        ;send start of pass 2 msg
  2707 00:1A6B: A0 1A                ldy     #>ps2msg
  2708 00:1A6D: 20 50 08             jsr     wrcnms
  2709 00:1A70: 20 F1 08             JSR     CLKIND          ;clear kim index
  2710 00:1A73: 20 60 09             JSR     CLLIND          ;clear list index
  2711 00:1A76: 20 36 19             JSR     DOPASS
  2712 00:1A79: A9 71                LDA     #<ERNMSG        ;point to
  2713 00:1A7B: A0 1B                LDY     #>ERNMSG        ;error count message
  2714 00:1A7D: 20 50 08             JSR     WRCNMS          ;write it
  2715 00:1A80: A5 18                LDA     ERCT            ;then high
  2716 00:1A82: 20 C2 09             JSR     CNUMA           ;byte of count
  2717 00:1A85: A5 19                LDA     ERCT+1          ;then low
  2718 00:1A87: 20 C2 09             JSR     CNUMA           ;byte of count
  2719 00:1A8A: 20 DE 09             JSR     CCRLF           ;send a last cr and lf
  2720 00:1A8D: 24 7A                bit     nkmflg          ;test for no kim
  2721 00:1A8F: 30 1D                bmi     skkmfo          ;done if set
  2722 00:1A91: 20 A9 12             JSR     WRKMRC
  2723 00:1A94: 38           FLSHKM  SEC                     ;see if
  2724 00:1A95: A5 05                LDA     KIMIND          ;whole
  2725 00:1A97: E9 00                SBC     #<KIMBUF        ;number
  2726 00:1A99: 29 7F                AND     #127            ;sectors
  2727 00:1A9B: F0 08                BEQ     WHLREC          ;branch if it is
  2728 00:1A9D: A9 1A                LDA     #EOF            ;else insert
  2729 00:1A9F: 20 80 09             JSR     KIMOUT          ;an eof
  2730 00:1AA2: 4C 94 1A             JMP     FLSHKM          ;and loop
  2731 00:1AA5: 20 B2 08     WHLREC  JSR     WRTKIM          ;write last sector
  2732 00:1AA8: 20 95 08             JSR     SKMFCB
  2733 00:1AAB: 20 58 08             JSR     CLSFIL
  2734 00:1AAE: A5 78        skkmfo  lda     lstflg          ;see if no list
  2735 00:1AB0: 05 79                ora     nlsflg
  2736 00:1AB2: 30 1A                bmi     extsys          ;exit if none
  2737 00:1AB4: 38           FLSHLS  SEC                     ;see if list
  2738 00:1AB5: A5 07                LDA     LSTIND          ;index a whole
  2739 00:1AB7: E9 00                SBC     #<LSTBUF        ;number sectors
  2740 00:1AB9: 29 7F                AND     #127            ;of 128
  2741 00:1ABB: F0 08                BEQ     WHLLST          ;jump if it is
  2742 00:1ABD: A9 1A                LDA     #EOF            ;else get an eof
  2743 00:1ABF: 20 9C 09             JSR     OUTPUT          ;send to buffer
  2744 00:1AC2: 4C B4 1A             JMP     FLSHLS          ;and loop
  2745 00:1AC5: 20 21 09     WHLLST  JSR     WRTLST          ;now write file
  2746 00:1AC8: 20 9A 08             JSR     SLSFCB          ;point to it
  2747 00:1ACB: 20 58 08             JSR     CLSFIL          ;close it
  2748 00:1ACE: 4C 3B 08     extsys  JMP     WRMBTE
  2749                        ;messages
  2750 00:1AD1: 53 54 41 52  ps1msg  .DB     "START OF PASS 1",cr,lf,"$"
       00:1AD5: 54 20 4F 46 
       00:1AD9: 20 50 41 53 
       00:1ADD: 53 20 31 0D 
       00:1AE1: 0A 24 
  2751 00:1AE3: 53 54 41 52  ps2msg  .DB     "START OF PASS 2",cr,lf,"$"
       00:1AE7: 54 20 4F 46 
       00:1AEB: 20 50 41 53 
       00:1AEF: 53 20 32 0D 
  Tue Sep 27 2022  1:06                                                                                                    Page 45


       00:1AF3: 0A 24 
  2752 00:1AF5: 45 4E 44 20  ENDMSG  .DB     "END OF PASS 2$"
       00:1AF9: 4F 46 20 50 
       00:1AFD: 41 53 53 20 
       00:1B01: 32 24 
  2753 00:1B03: 44 4F 53 2F  STRMSG  .DB     "DOS/65 ASSEMBLER",CR,LF
       00:1B07: 36 35 20 41 
       00:1B0B: 53 53 45 4D 
       00:1B0F: 42 4C 45 52 
       00:1B13: 0D 0A 
  2754 00:1B15: 56 45 52 53          .DB     "VERSION 2.11-A",CR,LF,"$"
       00:1B19: 49 4F 4E 20 
       00:1B1D: 32 2E 31 31 
       00:1B21: 2D 41 0D 0A 
       00:1B25: 24 
  2755 00:1B26: 49 4C 4C 45  ildmsg  .DB     "ILLEGAL DRIVE DESIGNATOR$"
       00:1B2A: 47 41 4C 20 
       00:1B2E: 44 52 49 56 
       00:1B32: 45 20 44 45 
       00:1B36: 53 49 47 4E 
       00:1B3A: 41 54 4F 52 
       00:1B3E: 24 
  2756 00:1B3F: 45 4E 44 20  SRTMSG  .DB     "END OF PASS 1",CR,LF
       00:1B43: 4F 46 20 50 
       00:1B47: 41 53 53 20 
       00:1B4B: 31 0D 0A 
  2757 00:1B4E: 53 4F 52 54          .DB     "SORTING SYMBOL TABLE"
       00:1B52: 49 4E 47 20 
       00:1B56: 53 59 4D 42 
       00:1B5A: 4F 4C 20 54 
       00:1B5E: 41 42 4C 45 
  2758 00:1B62: 20 2D 20 50          .DB     " - PLEASE WAIT$"
       00:1B66: 4C 45 41 53 
       00:1B6A: 45 20 57 41 
       00:1B6E: 49 54 24 
  2759 00:1B71: 4E 55 4D 42  ERNMSG  .DB     "NUMBER OF ERRORS = $"
       00:1B75: 45 52 20 4F 
       00:1B79: 46 20 45 52 
       00:1B7D: 52 4F 52 53 
       00:1B81: 20 3D 20 24 
  2760 00:1B85: 2A 2A 45 52  ERRMSG  .DB     "**ERROR**$"
       00:1B89: 52 4F 52 2A 
       00:1B8D: 2A 24 
  2761 00:1B8F: 0D 0A 44 4F  PERMSG  .DB     CR,LF,"DOS/65 FILE ERROR - ASSEMBLY "
       00:1B93: 53 2F 36 35 
       00:1B97: 20 46 49 4C 
       00:1B9B: 45 20 45 52 
       00:1B9F: 52 4F 52 20 
       00:1BA3: 2D 20 41 53 
       00:1BA7: 53 45 4D 42 
       00:1BAB: 4C 59 20 
  2762 00:1BAE: 41 42 4F 52          .DB     "ABORTED$"
       00:1BB2: 54 45 44 24 
  2763                        ;error message vector table
  2764 00:1BB6: 00 00 EA 1B  ERRVEC  .DW     0,ERR01,ERR02,ERR03,ERR04
       00:1BBA: FB 1B 14 1C 
       00:1BBE: 2E 1C 
  2765 00:1BC0: 40 1C 5D 1C          .DW     ERR05,ERR06,ERR07,ERR08,ERR09
       00:1BC4: 7F 1C 93 1C 
       00:1BC8: C2 1C 
  2766 00:1BCA: D1 1C FB 1C          .DW     ERR10,ERR11,ERR12,ERR13,ERR14
       00:1BCE: 1E 1D 3D 1D 
       00:1BD2: 50 1D 
  Tue Sep 27 2022  1:06                                                                                                    Page 46


  2767 00:1BD4: 6E 1D 91 1D          .DW     ERR15,ERR16,ERR17,ERR18,ERR19
       00:1BD8: B3 1D D0 1D 
       00:1BDC: FA 1D 
  2768 00:1BDE: 1F 1E 42 1E          .DW     ERR20,ERR21,ERR22,ERR23,ERR24
       00:1BE2: 68 1E 90 1E 
       00:1BE6: A5 1E 
  2769 00:1BE8: C2 1E                .DW     ERR25
  2770                        ;assembler error messages
  2771 00:1BEA: 55 4E 44 45  ERR01   .DB     "UNDEFINED SYMBOL$"
       00:1BEE: 46 49 4E 45 
       00:1BF2: 44 20 53 59 
       00:1BF6: 4D 42 4F 4C 
       00:1BFA: 24 
  2772 00:1BFB: 4C 41 42 45  ERR02   .DB     "LABEL PREVIOUSLY DEFINED$"
       00:1BFF: 4C 20 50 52 
       00:1C03: 45 56 49 4F 
       00:1C07: 55 53 4C 59 
       00:1C0B: 20 44 45 46 
       00:1C0F: 49 4E 45 44 
       00:1C13: 24 
  2773 00:1C14: 49 4C 4C 45  ERR03   .DB     "ILLEGAL OR MISSING OPCODE$"
       00:1C18: 47 41 4C 20 
       00:1C1C: 4F 52 20 4D 
       00:1C20: 49 53 53 49 
       00:1C24: 4E 47 20 4F 
       00:1C28: 50 43 4F 44 
       00:1C2C: 45 24 
  2774 00:1C2E: 41 44 44 52  ERR04   .DB     "ADDRESS NOT VALID$"
       00:1C32: 45 53 53 20 
       00:1C36: 4E 4F 54 20 
       00:1C3A: 56 41 4C 49 
       00:1C3E: 44 24 
  2775 00:1C40: 41 43 43 55  ERR05   .DB     "ACCUMULATOR MODE NOT ALLOWED$"
       00:1C44: 4D 55 4C 41 
       00:1C48: 54 4F 52 20 
       00:1C4C: 4D 4F 44 45 
       00:1C50: 20 4E 4F 54 
       00:1C54: 20 41 4C 4C 
       00:1C58: 4F 57 45 44 
       00:1C5C: 24 
  2776 00:1C5D: 46 4F 52 57  ERR06   .DB     "FORWARD REFERENCE IN .BYT OR "
       00:1C61: 41 52 44 20 
       00:1C65: 52 45 46 45 
       00:1C69: 52 45 4E 43 
       00:1C6D: 45 20 49 4E 
       00:1C71: 20 2E 42 59 
       00:1C75: 54 20 4F 52 
       00:1C79: 20 
  2777 00:1C7A: 2E 57 4F 52          .DB     ".WOR$"
       00:1C7E: 24 
  2778 00:1C7F: 52 41 4E 20  ERR07   .DB     "RAN OFF END OF LINE$"
       00:1C83: 4F 46 46 20 
       00:1C87: 45 4E 44 20 
       00:1C8B: 4F 46 20 4C 
       00:1C8F: 49 4E 45 24 
  2779 00:1C93: 4C 41 42 45  ERR08   .DB     "LABEL DOES NOT BEGIN WITH "
       00:1C97: 4C 20 44 4F 
       00:1C9B: 45 53 20 4E 
       00:1C9F: 4F 54 20 42 
       00:1CA3: 45 47 49 4E 
       00:1CA7: 20 57 49 54 
       00:1CAB: 48 20 
  2780 00:1CAD: 41 4C 50 48          .DB     "ALPHABETIC CHARACTER$"
  Tue Sep 27 2022  1:06                                                                                                    Page 47


       00:1CB1: 41 42 45 54 
       00:1CB5: 49 43 20 43 
       00:1CB9: 48 41 52 41 
       00:1CBD: 43 54 45 52 
       00:1CC1: 24 
  2781 00:1CC2: 4C 41 42 45  ERR09   .DB     "LABEL TOO LONG$"
       00:1CC6: 4C 20 54 4F 
       00:1CCA: 4F 20 4C 4F 
       00:1CCE: 4E 47 24 
  2782 00:1CD1: 4C 41 42 45  ERR10   .DB     "LABEL OR OPCODE CONTAINS "
       00:1CD5: 4C 20 4F 52 
       00:1CD9: 20 4F 50 43 
       00:1CDD: 4F 44 45 20 
       00:1CE1: 43 4F 4E 54 
       00:1CE5: 41 49 4E 53 
       00:1CE9: 20 
  2783 00:1CEA: 4E 4F 4E 2D          .DB     "NON-ALPHANUMERIC$"
       00:1CEE: 41 4C 50 48 
       00:1CF2: 41 4E 55 4D 
       00:1CF6: 45 52 49 43 
       00:1CFA: 24 
  2784 00:1CFB: 46 4F 52 57  ERR11   .DB     "FORWARD REFERENCE IN EQUATE "
       00:1CFF: 41 52 44 20 
       00:1D03: 52 45 46 45 
       00:1D07: 52 45 4E 43 
       00:1D0B: 45 20 49 4E 
       00:1D0F: 20 45 51 55 
       00:1D13: 41 54 45 20 
  2785 00:1D17: 4F 52 20 4F          .DB     "OR ORG$"
       00:1D1B: 52 47 24 
  2786 00:1D1E: 49 4E 56 41  ERR12   .DB     "INVALID INDEX - MUST BE X OR"
       00:1D22: 4C 49 44 20 
       00:1D26: 49 4E 44 45 
       00:1D2A: 58 20 2D 20 
       00:1D2E: 4D 55 53 54 
       00:1D32: 20 42 45 20 
       00:1D36: 58 20 4F 52 
  2787 00:1D3A: 20 59 24             .DB     " Y$"
  2788 00:1D3D: 49 4E 56 41  ERR13   .DB     "INVALID EXPRESSION$"
       00:1D41: 4C 49 44 20 
       00:1D45: 45 58 50 52 
       00:1D49: 45 53 53 49 
       00:1D4D: 4F 4E 24 
  2789 00:1D50: 55 4E 44 45  ERR14   .DB     "UNDEFINED ASSEMBLER DIRECTIVE$"
       00:1D54: 46 49 4E 45 
       00:1D58: 44 20 41 53 
       00:1D5C: 53 45 4D 42 
       00:1D60: 4C 45 52 20 
       00:1D64: 44 49 52 45 
       00:1D68: 43 54 49 56 
       00:1D6C: 45 24 
  2790 00:1D6E: 49 4E 56 41  ERR15   .DB     "INVALID OPERAND FOR PAGE ZERO "
       00:1D72: 4C 49 44 20 
       00:1D76: 4F 50 45 52 
       00:1D7A: 41 4E 44 20 
       00:1D7E: 46 4F 52 20 
       00:1D82: 50 41 47 45 
       00:1D86: 20 5A 45 52 
       00:1D8A: 4F 20 
  2791 00:1D8C: 4D 4F 44 45          .DB     "MODE$"
       00:1D90: 24 
  2792 00:1D91: 49 4E 56 41  ERR16   .DB     "INVALID OPERAND FOR ABSOLUTE "
       00:1D95: 4C 49 44 20 
  Tue Sep 27 2022  1:06                                                                                                    Page 48


       00:1D99: 4F 50 45 52 
       00:1D9D: 41 4E 44 20 
       00:1DA1: 46 4F 52 20 
       00:1DA5: 41 42 53 4F 
       00:1DA9: 4C 55 54 45 
       00:1DAD: 20 
  2793 00:1DAE: 4D 4F 44 45          .DB     "MODE$"
       00:1DB2: 24 
  2794 00:1DB3: 52 45 4C 41  ERR17   .DB     "RELATIVE BRANCH OUT OF RANGE$"
       00:1DB7: 54 49 56 45 
       00:1DBB: 20 42 52 41 
       00:1DBF: 4E 43 48 20 
       00:1DC3: 4F 55 54 20 
       00:1DC7: 4F 46 20 52 
       00:1DCB: 41 4E 47 45 
       00:1DCF: 24 
  2795 00:1DD0: 49 4C 4C 45  ERR18   .DB     "ILLEGAL OPERAND TYPE FOR THIS "
       00:1DD4: 47 41 4C 20 
       00:1DD8: 4F 50 45 52 
       00:1DDC: 41 4E 44 20 
       00:1DE0: 54 59 50 45 
       00:1DE4: 20 46 4F 52 
       00:1DE8: 20 54 48 49 
       00:1DEC: 53 20 
  2796 00:1DEE: 49 4E 53 54          .DB     "INSTRUCTION$"
       00:1DF2: 52 55 43 54 
       00:1DF6: 49 4F 4E 24 
  2797 00:1DFA: 4F 55 54 20  ERR19   .DB     "OUT OF BOUNDS ON INDIRECT "
       00:1DFE: 4F 46 20 42 
       00:1E02: 4F 55 4E 44 
       00:1E06: 53 20 4F 4E 
       00:1E0A: 20 49 4E 44 
       00:1E0E: 49 52 45 43 
       00:1E12: 54 20 
  2798 00:1E14: 41 44 44 52          .DB     "ADDRESSING$"
       00:1E18: 45 53 53 49 
       00:1E1C: 4E 47 24 
  2799 00:1E1F: 41 2C 58 2C  ERR20   .DB     "A,X,Y,S, AND P ARE RESERVED "
       00:1E23: 59 2C 53 2C 
       00:1E27: 20 41 4E 44 
       00:1E2B: 20 50 20 41 
       00:1E2F: 52 45 20 52 
       00:1E33: 45 53 45 52 
       00:1E37: 56 45 44 20 
  2800 00:1E3B: 4C 41 42 45          .DB     "LABELS$"
       00:1E3F: 4C 53 24 
  2801 00:1E42: 50 52 4F 47  ERR21   .DB     "PROGRAM COUNTER NEGATIVE - "
       00:1E46: 52 41 4D 20 
       00:1E4A: 43 4F 55 4E 
       00:1E4E: 54 45 52 20 
       00:1E52: 4E 45 47 41 
       00:1E56: 54 49 56 45 
       00:1E5A: 20 2D 20 
  2802 00:1E5D: 52 45 53 45          .DB     "RESET TO 0$"
       00:1E61: 54 20 54 4F 
       00:1E65: 20 30 24 
  2803 00:1E68: 49 4E 56 41  ERR22   .DB     "INVALID CHARACTER - EXPECTING"
       00:1E6C: 4C 49 44 20 
       00:1E70: 43 48 41 52 
       00:1E74: 41 43 54 45 
       00:1E78: 52 20 2D 20 
       00:1E7C: 45 58 50 45 
       00:1E80: 43 54 49 4E 
  Tue Sep 27 2022  1:06                                                                                                    Page 49


       00:1E84: 47 
  2804 00:1E85: 20 3D 20 46          .DB     " = FOR ORG$"
       00:1E89: 4F 52 20 4F 
       00:1E8D: 52 47 24 
  2805 00:1E90: 53 4F 55 52  ERR23   .DB     "SOURCE LINE TOO LONG$"
       00:1E94: 43 45 20 4C 
       00:1E98: 49 4E 45 20 
       00:1E9C: 54 4F 4F 20 
       00:1EA0: 4C 4F 4E 47 
       00:1EA4: 24 
  2806 00:1EA5: 44 49 56 49  ERR24   .DB     "DIVIDE BY ZERO IN EXPRESSION$"
       00:1EA9: 44 45 20 42 
       00:1EAD: 59 20 5A 45 
       00:1EB1: 52 4F 20 49 
       00:1EB5: 4E 20 45 58 
       00:1EB9: 50 52 45 53 
       00:1EBD: 53 49 4F 4E 
       00:1EC1: 24 
  2807 00:1EC2: 53 59 4D 42  ERR25   .DB     "SYMBOL TABLE OVERFLOW$"
       00:1EC6: 4F 4C 20 54 
       00:1ECA: 41 42 4C 45 
       00:1ECE: 20 4F 56 45 
       00:1ED2: 52 46 4C 4F 
       00:1ED6: 57 24 
  2808                        ;directive and option jump table
  2809 00:1ED8: D4 16 D0 16  ASMJMP  .DW     H312,H311,H308,H307
       00:1EDC: CB 16 C7 16 
  2810 00:1EE0: B0 16 AC 16          .DW     NOKIM,KIM,H304,H303,H302
       00:1EE4: C2 16 BE 16 
       00:1EE8: BA 16 
  2811 00:1EEA: B5 16 89 16          .DW     H323,H301,H10,PAGE
       00:1EEE: 83 11 A1 15 
  2812 00:1EF2: BA 15 B6 15          .DW     H113,H111
  2813                        ;assembler directives
  2814 00:1EF6: 42 59 54 57  ASMDIR  .DB     "BYTWORPAGENDOPT"
       00:1EFA: 4F 52 50 41 
       00:1EFE: 47 45 4E 44 
       00:1F02: 4F 50 54 
  2815                        ;option parameters
  2816 00:1F05: 47 45 4E 4E  OPTDIR  .DB     "GENNOGSYMNOSKIMNOK"
       00:1F09: 4F 47 53 59 
       00:1F0D: 4D 4E 4F 53 
       00:1F11: 4B 49 4D 4E 
       00:1F15: 4F 4B 
  2817 00:1F17: 45 52 52 4E          .DB     "ERRNOELISNOL"
       00:1F1B: 4F 45 4C 49 
       00:1F1F: 53 4E 4F 4C 
  2818                        ;op-codes
  2819 00:1F23: 41 44 43 41  OPRNDS  .DB     "ADCANDASLBCCBCSBEQBITBMI"
       00:1F27: 4E 44 41 53 
       00:1F2B: 4C 42 43 43 
       00:1F2F: 42 43 53 42 
       00:1F33: 45 51 42 49 
       00:1F37: 54 42 4D 49 
  2820 00:1F3B: 42 4E 45 42          .DB     "BNEBPLBRKBVCBVSCLCCLDCLI"
       00:1F3F: 50 4C 42 52 
       00:1F43: 4B 42 56 43 
       00:1F47: 42 56 53 43 
       00:1F4B: 4C 43 43 4C 
       00:1F4F: 44 43 4C 49 
  2821 00:1F53: 43 4C 56 43          .DB     "CLVCMPCPXCPYDECDEXDEYEOR"
       00:1F57: 4D 50 43 50 
       00:1F5B: 58 43 50 59 
  Tue Sep 27 2022  1:06                                                                                                    Page 50


       00:1F5F: 44 45 43 44 
       00:1F63: 45 58 44 45 
       00:1F67: 59 45 4F 52 
  2822 00:1F6B: 49 4E 43 49          .DB     "INCINXINYJMPJSRLDALDXLDY"
       00:1F6F: 4E 58 49 4E 
       00:1F73: 59 4A 4D 50 
       00:1F77: 4A 53 52 4C 
       00:1F7B: 44 41 4C 44 
       00:1F7F: 58 4C 44 59 
  2823 00:1F83: 4C 53 52 4E          .DB     "LSRNOPORAPHAPHPPLAPLPROL"
       00:1F87: 4F 50 4F 52 
       00:1F8B: 41 50 48 41 
       00:1F8F: 50 48 50 50 
       00:1F93: 4C 41 50 4C 
       00:1F97: 50 52 4F 4C 
  2824 00:1F9B: 52 4F 52 52          .DB     "RORRTIRTSSBCSECSEDSEISTA"
       00:1F9F: 54 49 52 54 
       00:1FA3: 53 53 42 43 
       00:1FA7: 53 45 43 53 
       00:1FAB: 45 44 53 45 
       00:1FAF: 49 53 54 41 
  2825 00:1FB3: 53 54 58 53          .DB     "STXSTYTAXTAYTSXTXATXSTYA"
       00:1FB7: 54 59 54 41 
       00:1FBB: 58 54 41 59 
       00:1FBF: 54 53 58 54 
       00:1FC3: 58 41 54 58 
       00:1FC7: 53 54 59 41 
  2826 00:1FCB: FF 0D 1B 29  KLUDG   .DB     255,13,27,41,55,69,83,97
       00:1FCF: 37 45 53 61 
  2827 00:1FD3: 6F 7D 8B 99          .DB     111,125,139,153,167,181,195
       00:1FD7: A7 B5 C3 
  2828 00:1FDA: FF FF FF FF  KLTBL   .DB     255,255,255,255,4,255,255,255
       00:1FDE: 04 FF FF FF 
  2829 00:1FE2: FF FF FF FF          .DB     255,255,255,255,255,255,4,4
       00:1FE6: FF FF 04 04 
  2830 00:1FEA: FF FF 00 04          .DB     255,255,0,4,0,4,0,0
       00:1FEE: 00 04 00 00 
  2831 00:1FF2: 04 00 FF 00          .DB     4,0,255,0,20,20,255,255
       00:1FF6: 14 14 FF FF 
  2832 00:1FFA: 10 FF FF 14          .DB     16,255,255,20,255,16,255,16
       00:1FFE: FF 10 FF 10 
  2833 00:2002: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:2006: FF FF FF FF 
  2834 00:200A: FF FF 10 FF          .DB     255,255,16,255,20,255,255,255
       00:200E: 14 FF FF FF 
  2835 00:2012: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:2016: FF FF FF FF 
  2836 00:201A: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:201E: FF FF FF FF 
  2837 00:2022: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:2026: FF FF FF FF 
  2838 00:202A: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:202E: FF FF FF FF 
  2839 00:2032: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:2036: FF FF FF FF 
  2840 00:203A: FF FF 00 00          .DB     255,255,0,0,32,255,255,255
       00:203E: 20 FF FF FF 
  2841 00:2042: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:2046: FF FF FF FF 
  2842 00:204A: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:204E: FF FF FF FF 
  2843 00:2052: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:2056: FF FF FF FF 
  Tue Sep 27 2022  1:06                                                                                                    Page 51


  2844 00:205A: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:205E: FF FF FF FF 
  2845 00:2062: FF FF FF FF          .DB     255,255,255,255,16,16,255,255
       00:2066: 10 10 FF FF 
  2846 00:206A: FF FF FF FF          .DB     255,255,255,255,255,255,255,255
       00:206E: FF FF FF FF 
  2847 00:2072: FF FF 08 FF          .DB     255,255,8,255,255,255,255,0
       00:2076: FF FF FF 00 
  2848 00:207A: FF 00 FF FF          .DB     255,0,255,255,0,255,255,255
       00:207E: 00 FF FF FF 
  2849 00:2082: 0C 0C 00 00          .DB     12,12,0,0,8,12,8,12
       00:2086: 08 0C 08 0C 
  2850 00:208A: 08 08 0C 08          .DB     8,8,12,8,255,255,28,28
       00:208E: FF FF 1C 1C 
  2851 00:2092: FF FF 18 FF          .DB     255,255,24,255,255,28,255,255
       00:2096: FF 1C FF FF 
  2852 00:209A: FF 18 FF FF          .DB     255,24,255,255,24,24,255,255
       00:209E: 18 18 FF FF 
  2853 00:20A2: FF FF FF FF          .DB     255,255,255,255,255,255,$1C,255
       00:20A6: FF FF 1C FF 
  2854 00:20AA: FF FF                .DB     255,255
  2855                        ;template table that defines groups of opcodes
  2856                        ;that have the same addressing modes
  2857                        ;this comment includes 65c02 opcodes not yet in ASM
  2858                        ; 1=adc,and,cmp,eor,lda,ora,sbc
  2859                        ; 2=sta
  2860                        ; 3=jmp
  2861                        ; 4=jsr
  2862                        ; 5=asl,lsr,rol,ror
  2863                        ; 6=cpx,cpy
  2864                        ; 7=bit
  2865                        ; 8=ldy
  2866                        ; 9=stx
  2867                        ; 10=sty
  2868                        ; 11=ldx
  2869                        ; 12=dec,inc
  2870                        ; 13 not used
  2871                        ; 14=bcc,bcs,beq,bmi,bne,bpl,bra,bvc,bvs
  2872                        ; 15-19 not used
  2873                        ; 20=all implied (e.g., tay and brk)
  2874 00:20AC: 01 01 05 0E  KTMPL   .DB     1,1,5,14,14,14,7,14
       00:20B0: 0E 0E 07 0E 
  2875 00:20B4: 0E 0E 14 0E          .DB     14,14,20,14,14,20,20,20
       00:20B8: 0E 14 14 14 
  2876 00:20BC: 14 01 06 06          .DB     20,1,6,6,12,20,20,1
       00:20C0: 0C 14 14 01 
  2877 00:20C4: 0C 14 14 03          .DB     12,20,20,3,4,1,11,8
       00:20C8: 04 01 0B 08 
  2878 00:20CC: 05 14 01 14          .DB     5,20,1,20,20,20,20,5
       00:20D0: 14 14 14 05 
  2879 00:20D4: 05 14 14 01          .DB     5,20,20,1,20,20,20,2
       00:20D8: 14 14 14 02 
  2880 00:20DC: 09 0A 14 14          .DB     9,10,20,20,20,20,20,20
       00:20E0: 14 14 14 14 
  2881                        ;table of base opcodes arranged in same
  2882                        ;order as OPRNDS table
  2883                        ;the entry in this table is the actual opcode
  2884                        ;for template groups 4, 14, and 20.  For all
  2885                        ;others, the entry is the smallest numerical
  2886                        ;opcode for that mnemonic.
  2887 00:20E4: 61 21 06 90  KCODE   .DB     97,33,6,144,176,240,36,48
       00:20E8: B0 F0 24 30 
  2888 00:20EC: D0 10 00 50          .DB     208,16,0,80,112,24,216,88
  Tue Sep 27 2022  1:06                                                                                                    Page 52


       00:20F0: 70 18 D8 58 
  2889 00:20F4: B8 C1 E0 C0          .DB     184,193,224,192,198,202,136,65
       00:20F8: C6 CA 88 41 
  2890 00:20FC: E6 E8 C8 4C          .DB     230,232,200,76,32,161,162,160
       00:2100: 20 A1 A2 A0 
  2891 00:2104: 46 EA 01 48          .DB     70,234,1,72,8,104,40,38
       00:2108: 08 68 28 26 
  2892 00:210C: 66 40 60 E1          .DB     $66,64,96,225,56,248,120,129
       00:2110: 38 F8 78 81 
  2893 00:2114: 86 84 AA A8          .DB     134,132,170,168,186,138,154,152
       00:2118: BA 8A 9A 98 
  2894                        ;source fcb
  2895 00:211C: 00           SRCFCB  .DB     0
  2896 00:211D:                      DEFS    8
  2897 00:2125: 41 53 4D 00          .DB     "ASM",0,0,0
       00:2129: 00 00 
  2898 00:212B:                      DEFS    17
  2899 00:213C: 00                   .DB     0
  2900                        ;kim fcb
  2901 00:213D: 00           KIMFCB  .DB     0
  2902 00:213E:                      DEFS    8
  2903 00:2146: 4B 49 4D 00          .DB     "KIM",0,0,0
       00:214A: 00 00 
  2904 00:214C:                      DEFS    17
  2905 00:215D: 00                   .DB     0
  2906                        ;list fcb
  2907 00:215E: 00           LSTFCB  .DB     0
  2908 00:215F:                      DEFS    8
  2909 00:2167: 50 52 4E 00          .DB     "PRN",0,0,0
       00:216B: 00 00 
  2910 00:216D:                      DEFS    17
  2911 00:217E: 00                   .DB     0
  2912                        ;
  2913                                org     $/256*256+256                   ;Align to Page address
  2914                        ;
  2915                        ;source disk buffer
  2916 00:2200:              SRCBUF  DEFS    SRCLNG
  2917                        ;
  2918                        ;kim disk buffer
  2919 00:2600:              KIMBUF  DEFS    KIMLNG
  2920                        ;
  2921                        ;list disk buffer
  2922 00:2A00:              LSTBUF  DEFS    LSTLNG
  2923                        ;
  2924                        ;code buffer
  2925 00:2E00:              CODE    DEFS    LINESZ-4
  2926                        ;
  2927                        ;line buffer
  2928 00:2E4C:              LINE    DEFS    LINESZ+2
  2929                        ;
  2930                        ;input echo buffer
  2931 00:2E9E:              ECHBUF  DEFS    LINESZ+2                ;echo buffer
  2932                        ;
  2933                                org     $/256*256+256                   ;Align to Page address
  2934                        ;symbol buffer
  2935                        ;length is determined by symlen
  2936             00002F00   sym     .EQU    *
  2937                                .END


      Lines assembled: 2937
      Errors: 0
